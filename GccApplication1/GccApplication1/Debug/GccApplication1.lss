
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000007de  00000872  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080010c  0080010c  0000087e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000087e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ca0  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000914  00000000  00000000  00001618  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000090b  00000000  00000000  00001f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00002838  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e0  00000000  00000000  0000294c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000be  00000000  00000000  0000302c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000030ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	59 c0       	rjmp	.+178    	; 0xb4 <__ctors_end>
   2:	00 00       	nop
   4:	74 c0       	rjmp	.+232    	; 0xee <__bad_interrupt>
   6:	00 00       	nop
   8:	72 c0       	rjmp	.+228    	; 0xee <__bad_interrupt>
   a:	00 00       	nop
   c:	70 c0       	rjmp	.+224    	; 0xee <__bad_interrupt>
   e:	00 00       	nop
  10:	6e c0       	rjmp	.+220    	; 0xee <__bad_interrupt>
  12:	00 00       	nop
  14:	6c c0       	rjmp	.+216    	; 0xee <__bad_interrupt>
  16:	00 00       	nop
  18:	6a c0       	rjmp	.+212    	; 0xee <__bad_interrupt>
  1a:	00 00       	nop
  1c:	68 c0       	rjmp	.+208    	; 0xee <__bad_interrupt>
  1e:	00 00       	nop
  20:	66 c0       	rjmp	.+204    	; 0xee <__bad_interrupt>
  22:	00 00       	nop
  24:	64 c0       	rjmp	.+200    	; 0xee <__bad_interrupt>
  26:	00 00       	nop
  28:	62 c0       	rjmp	.+196    	; 0xee <__bad_interrupt>
  2a:	00 00       	nop
  2c:	60 c0       	rjmp	.+192    	; 0xee <__bad_interrupt>
  2e:	00 00       	nop
  30:	5e c0       	rjmp	.+188    	; 0xee <__bad_interrupt>
  32:	00 00       	nop
  34:	81 c0       	rjmp	.+258    	; 0x138 <__vector_13>
  36:	00 00       	nop
  38:	5a c0       	rjmp	.+180    	; 0xee <__bad_interrupt>
  3a:	00 00       	nop
  3c:	58 c0       	rjmp	.+176    	; 0xee <__bad_interrupt>
  3e:	00 00       	nop
  40:	56 c0       	rjmp	.+172    	; 0xee <__bad_interrupt>
  42:	00 00       	nop
  44:	54 c0       	rjmp	.+168    	; 0xee <__bad_interrupt>
  46:	00 00       	nop
  48:	52 c0       	rjmp	.+164    	; 0xee <__bad_interrupt>
  4a:	00 00       	nop
  4c:	50 c0       	rjmp	.+160    	; 0xee <__bad_interrupt>
  4e:	00 00       	nop
  50:	4e c0       	rjmp	.+156    	; 0xee <__bad_interrupt>
  52:	00 00       	nop
  54:	4c c0       	rjmp	.+152    	; 0xee <__bad_interrupt>
  56:	00 00       	nop
  58:	4a c0       	rjmp	.+148    	; 0xee <__bad_interrupt>
  5a:	00 00       	nop
  5c:	48 c0       	rjmp	.+144    	; 0xee <__bad_interrupt>
  5e:	00 00       	nop
  60:	46 c0       	rjmp	.+140    	; 0xee <__bad_interrupt>
  62:	00 00       	nop
  64:	44 c0       	rjmp	.+136    	; 0xee <__bad_interrupt>
  66:	00 00       	nop
  68:	42 c0       	rjmp	.+132    	; 0xee <__bad_interrupt>
  6a:	00 00       	nop
  6c:	40 c0       	rjmp	.+128    	; 0xee <__bad_interrupt>
  6e:	00 00       	nop
  70:	3e c0       	rjmp	.+124    	; 0xee <__bad_interrupt>
  72:	00 00       	nop
  74:	3c c0       	rjmp	.+120    	; 0xee <__bad_interrupt>
  76:	00 00       	nop
  78:	3a c0       	rjmp	.+116    	; 0xee <__bad_interrupt>
  7a:	00 00       	nop
  7c:	38 c0       	rjmp	.+112    	; 0xee <__bad_interrupt>
  7e:	00 00       	nop
  80:	36 c0       	rjmp	.+108    	; 0xee <__bad_interrupt>
  82:	00 00       	nop
  84:	34 c0       	rjmp	.+104    	; 0xee <__bad_interrupt>
  86:	00 00       	nop
  88:	32 c0       	rjmp	.+100    	; 0xee <__bad_interrupt>
  8a:	00 00       	nop
  8c:	30 01       	movw	r6, r0
  8e:	34 01       	movw	r6, r8
  90:	38 01       	movw	r6, r16
  92:	5f 01       	movw	r10, r30
  94:	00 02       	muls	r16, r16
  96:	d6 01       	movw	r26, r12
  98:	82 01       	movw	r16, r4
  9a:	ac 01       	movw	r20, r24
  9c:	88 02       	muls	r24, r24
  9e:	8a 02       	muls	r24, r26
  a0:	3c 02       	muls	r19, r28
  a2:	8b 02       	muls	r24, r27
  a4:	44 02       	muls	r20, r20
  a6:	4e 02       	muls	r20, r30
  a8:	7c 02       	muls	r23, r28
  aa:	70 02       	muls	r23, r16
  ac:	58 02       	muls	r21, r24
  ae:	64 02       	muls	r22, r20
  b0:	88 02       	muls	r24, r24
  b2:	8a 02       	muls	r24, r26

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d0 e4       	ldi	r29, 0x40	; 64
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ee ed       	ldi	r30, 0xDE	; 222
  c8:	f7 e0       	ldi	r31, 0x07	; 7
  ca:	00 e0       	ldi	r16, 0x00	; 0
  cc:	0b bf       	out	0x3b, r16	; 59
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <__do_copy_data+0x14>
  d0:	07 90       	elpm	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	ac 30       	cpi	r26, 0x0C	; 12
  d6:	b1 07       	cpc	r27, r17
  d8:	d9 f7       	brne	.-10     	; 0xd0 <__do_copy_data+0x10>

000000da <__do_clear_bss>:
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	ac e0       	ldi	r26, 0x0C	; 12
  de:	b1 e0       	ldi	r27, 0x01	; 1
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <.do_clear_bss_start>

000000e2 <.do_clear_bss_loop>:
  e2:	1d 92       	st	X+, r1

000000e4 <.do_clear_bss_start>:
  e4:	ac 31       	cpi	r26, 0x1C	; 28
  e6:	b2 07       	cpc	r27, r18
  e8:	e1 f7       	brne	.-8      	; 0xe2 <.do_clear_bss_loop>
  ea:	11 d3       	rcall	.+1570   	; 0x70e <main>
  ec:	76 c3       	rjmp	.+1772   	; 0x7da <_exit>

000000ee <__bad_interrupt>:
  ee:	88 cf       	rjmp	.-240    	; 0x0 <__vectors>

000000f0 <TimerOn>:
void TimerOff(){
	TCCR1B = 0x00;
}

void TimerISR(){
	TimerFlag = 1;
  f0:	8b e0       	ldi	r24, 0x0B	; 11
  f2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f6:	8d e7       	ldi	r24, 0x7D	; 125
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  fe:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 108:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 10c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 110:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_avr_timer_M>
 114:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_avr_timer_M+0x1>
 118:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <_avr_timer_M+0x2>
 11c:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <_avr_timer_M+0x3>
 120:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 124:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 128:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <__data_end+0x2>
 12c:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <__data_end+0x3>
 130:	8f b7       	in	r24, 0x3f	; 63
 132:	80 68       	ori	r24, 0x80	; 128
 134:	8f bf       	out	0x3f, r24	; 63
 136:	08 95       	ret

00000138 <__vector_13>:

}

ISR(TIMER1_COMPA_vect){
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	8f 93       	push	r24
 144:	9f 93       	push	r25
 146:	af 93       	push	r26
 148:	bf 93       	push	r27
	_avr_timer_cntcurr--;
 14a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 14e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 152:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <__data_end+0x2>
 156:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <__data_end+0x3>
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	a1 09       	sbc	r26, r1
 15e:	b1 09       	sbc	r27, r1
 160:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 164:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 168:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <__data_end+0x2>
 16c:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <__data_end+0x3>
	if (_avr_timer_cntcurr== 0)
 170:	89 2b       	or	r24, r25
 172:	8a 2b       	or	r24, r26
 174:	8b 2b       	or	r24, r27
 176:	99 f4       	brne	.+38     	; 0x19e <__vector_13+0x66>
void TimerOff(){
	TCCR1B = 0x00;
}

void TimerISR(){
	TimerFlag = 1;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <TimerFlag>
ISR(TIMER1_COMPA_vect){
	_avr_timer_cntcurr--;
	if (_avr_timer_cntcurr== 0)
	{
		TimerISR();
		_avr_timer_cntcurr=_avr_timer_M;
 17e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_avr_timer_M>
 182:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_avr_timer_M+0x1>
 186:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <_avr_timer_M+0x2>
 18a:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <_avr_timer_M+0x3>
 18e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 192:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 196:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <__data_end+0x2>
 19a:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <__data_end+0x3>
	}
}
 19e:	bf 91       	pop	r27
 1a0:	af 91       	pop	r26
 1a2:	9f 91       	pop	r25
 1a4:	8f 91       	pop	r24
 1a6:	0f 90       	pop	r0
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	0f 90       	pop	r0
 1ac:	1f 90       	pop	r1
 1ae:	18 95       	reti

000001b0 <TimerSet>:

void TimerSet(unsigned long M){
	_avr_timer_M=M;
 1b0:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <_avr_timer_M>
 1b4:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <_avr_timer_M+0x1>
 1b8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_avr_timer_M+0x2>
 1bc:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 1c0:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <__data_end>
 1c4:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <__data_end+0x1>
 1c8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end+0x2>
 1cc:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x3>
 1d0:	08 95       	ret

000001d2 <ballPOS_update>:
	pattern[i]=0;	
	i++;
	}
	*/
	
	pattern [xPOS]=(yPOS)<<0;
 1d2:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xPOS>
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	fc 01       	movw	r30, r24
 1da:	e0 50       	subi	r30, 0x00	; 0
 1dc:	ff 4f       	sbci	r31, 0xFF	; 255
 1de:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <yPOS>
 1e2:	20 83       	st	Z, r18
	if (ballLogicSM_state == ball_left || ballLogicSM_state == ball_upleft 
 1e4:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <ballLogicSM_state>
 1e8:	22 30       	cpi	r18, 0x02	; 2
 1ea:	21 f0       	breq	.+8      	; 0x1f4 <ballPOS_update+0x22>
 1ec:	3c ef       	ldi	r19, 0xFC	; 252
 1ee:	32 0f       	add	r19, r18
 1f0:	32 30       	cpi	r19, 0x02	; 2
 1f2:	28 f4       	brcc	.+10     	; 0x1fe <ballPOS_update+0x2c>
	|| ballLogicSM_state == ball_downleft)
	{
		pattern[xPOS+1]=0;
 1f4:	fc 01       	movw	r30, r24
 1f6:	e0 50       	subi	r30, 0x00	; 0
 1f8:	ff 4f       	sbci	r31, 0xFF	; 255
 1fa:	11 82       	std	Z+1, r1	; 0x01
 1fc:	08 95       	ret
	}else if (ballLogicSM_state == ball_right 
 1fe:	23 30       	cpi	r18, 0x03	; 3
 200:	19 f0       	breq	.+6      	; 0x208 <ballPOS_update+0x36>
	|| ballLogicSM_state == ball_upright || ballLogicSM_state == ball_downright)
 202:	26 50       	subi	r18, 0x06	; 6
 204:	22 30       	cpi	r18, 0x02	; 2
 206:	20 f4       	brcc	.+8      	; 0x210 <ballPOS_update+0x3e>
	{
		pattern[xPOS-1]=0;
 208:	fc 01       	movw	r30, r24
 20a:	e1 50       	subi	r30, 0x01	; 1
 20c:	ff 4f       	sbci	r31, 0xFF	; 255
 20e:	10 82       	st	Z, r1
 210:	08 95       	ret

00000212 <softRest>:
			0b00000000,
			0b00111000,
			};

void softRest(){
	if (reset)
 212:	04 9b       	sbis	0x00, 4	; 0
 214:	18 c0       	rjmp	.+48     	; 0x246 <softRest+0x34>
	{
		paddle1SM_state = paddle1SM_wait;
 216:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <paddle1SM_state>
		paddle2SM_state = paddle2SM_wait;
 21a:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <paddle2SM_state>
		ballLogicSM_state = ball_init;
 21e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <ballLogicSM_state>
		LED1_LOW();
 222:	2b 98       	cbi	0x05, 3	; 5
		LED2_LOW();
 224:	2c 98       	cbi	0x05, 4	; 5
		paddle1POS=16;
 226:	80 e1       	ldi	r24, 0x10	; 16
 228:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <paddle1POS>
		paddle2POS=16;
 22c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <paddle2POS>
		xPOS = 3;
 230:	93 e0       	ldi	r25, 0x03	; 3
 232:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <xPOS>
		yPOS = 16;
 236:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <yPOS>
		ballPOS_update();
 23a:	cb df       	rcall	.-106    	; 0x1d2 <ballPOS_update>
		pattern[0]=0b00111000;
 23c:	e0 e0       	ldi	r30, 0x00	; 0
 23e:	f1 e0       	ldi	r31, 0x01	; 1
 240:	88 e3       	ldi	r24, 0x38	; 56
 242:	80 83       	st	Z, r24
		pattern[7]=0b00111000;
 244:	87 83       	std	Z+7, r24	; 0x07
 246:	08 95       	ret

00000248 <ballLogicSM>:
	}
	
}	
 
void ballLogicSM(){
	switch (ballLogicSM_state){
 248:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <ballLogicSM_state>
 24c:	8e 2f       	mov	r24, r30
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	8a 30       	cpi	r24, 0x0A	; 10
 252:	91 05       	cpc	r25, r1
 254:	08 f0       	brcs	.+2      	; 0x258 <ballLogicSM+0x10>
 256:	06 c1       	rjmp	.+524    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 258:	fc 01       	movw	r30, r24
 25a:	ea 5b       	subi	r30, 0xBA	; 186
 25c:	ff 4f       	sbci	r31, 0xFF	; 255
 25e:	b4 c2       	rjmp	.+1384   	; 0x7c8 <__tablejump2__>
		case ball_init:
		ballLogicSM_state = ball_wait;
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 266:	08 95       	ret
		break;
		case  ball_wait:
		ballLogicSM_state = ball_left;
 268:	82 e0       	ldi	r24, 0x02	; 2
 26a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
		break;
 26e:	0c c1       	rjmp	.+536    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
		case ball_left:
		if (xPOS>1)
 270:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xPOS>
 274:	82 30       	cpi	r24, 0x02	; 2
 276:	08 f0       	brcs	.+2      	; 0x27a <ballLogicSM+0x32>
 278:	07 c1       	rjmp	.+526    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
		{
			ballLogicSM_state = ball_left;
		}else {
			if (paddle1POS == yPOS)
 27a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <paddle1POS>
 27e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <yPOS>
 282:	98 13       	cpse	r25, r24
 284:	04 c0       	rjmp	.+8      	; 0x28e <ballLogicSM+0x46>
			{
				ballLogicSM_state = ball_right;
 286:	83 e0       	ldi	r24, 0x03	; 3
 288:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 28c:	07 c1       	rjmp	.+526    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
			}else if (paddle1POS == yPOS<<1) //hit paddle1 bottom 
 28e:	49 2f       	mov	r20, r25
 290:	50 e0       	ldi	r21, 0x00	; 0
 292:	28 2f       	mov	r18, r24
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	22 0f       	add	r18, r18
 298:	33 1f       	adc	r19, r19
 29a:	42 17       	cp	r20, r18
 29c:	53 07       	cpc	r21, r19
 29e:	21 f4       	brne	.+8      	; 0x2a8 <ballLogicSM+0x60>
			{
				ballLogicSM_state = ball_upright;
 2a0:	86 e0       	ldi	r24, 0x06	; 6
 2a2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 2a6:	04 c1       	rjmp	.+520    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
			}else if (paddle1POS == yPOS>>1)
 2a8:	86 95       	lsr	r24
 2aa:	98 13       	cpse	r25, r24
 2ac:	04 c0       	rjmp	.+8      	; 0x2b6 <ballLogicSM+0x6e>
			{
				ballLogicSM_state = ball_downright;
 2ae:	87 e0       	ldi	r24, 0x07	; 7
 2b0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 2b4:	09 c1       	rjmp	.+530    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
			}else
			{
				ballLogicSM_state = player2win;
 2b6:	89 e0       	ldi	r24, 0x09	; 9
 2b8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 2bc:	2b c1       	rjmp	.+598    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
			}
			
		}
		break;
		case ball_right:
		if (xPOS!=6)
 2be:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xPOS>
 2c2:	86 30       	cpi	r24, 0x06	; 6
 2c4:	09 f0       	breq	.+2      	; 0x2c8 <ballLogicSM+0x80>
 2c6:	ea c0       	rjmp	.+468    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
		{
			ballLogicSM_state = ball_right;
			}else {
			if (paddle2POS == yPOS ) //test middle hit
 2c8:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <paddle2POS>
 2cc:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <yPOS>
 2d0:	98 13       	cpse	r25, r24
 2d2:	04 c0       	rjmp	.+8      	; 0x2dc <ballLogicSM+0x94>
			{
				ballLogicSM_state = ball_left;
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 2da:	d6 c0       	rjmp	.+428    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
			}else if (paddle2POS == yPOS<<1) 
 2dc:	49 2f       	mov	r20, r25
 2de:	50 e0       	ldi	r21, 0x00	; 0
 2e0:	28 2f       	mov	r18, r24
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	22 0f       	add	r18, r18
 2e6:	33 1f       	adc	r19, r19
 2e8:	42 17       	cp	r20, r18
 2ea:	53 07       	cpc	r21, r19
 2ec:	21 f4       	brne	.+8      	; 0x2f6 <ballLogicSM+0xae>
			{
				ballLogicSM_state = ball_upleft;
 2ee:	84 e0       	ldi	r24, 0x04	; 4
 2f0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 2f4:	01 c1       	rjmp	.+514    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
			}else if (paddle2POS == yPOS>>1)
 2f6:	86 95       	lsr	r24
 2f8:	98 13       	cpse	r25, r24
 2fa:	d0 c0       	rjmp	.+416    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
			{
				ballLogicSM_state = ball_downleft;
 2fc:	85 e0       	ldi	r24, 0x05	; 5
 2fe:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 302:	ee c0       	rjmp	.+476    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
			
		}
		break;
		
		case ball_upright:
		if (yPOS<128 && xPOS>1 )
 304:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <yPOS>
 308:	88 23       	and	r24, r24
 30a:	2c f0       	brlt	.+10     	; 0x316 <ballLogicSM+0xce>
 30c:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <xPOS>
 310:	92 30       	cpi	r25, 0x02	; 2
 312:	08 f0       	brcs	.+2      	; 0x316 <ballLogicSM+0xce>
 314:	cd c0       	rjmp	.+410    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
		{
			ballLogicSM_state = ball_upright;
		} else {
			if (xPOS!=6)
 316:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <xPOS>
 31a:	96 30       	cpi	r25, 0x06	; 6
 31c:	21 f0       	breq	.+8      	; 0x326 <ballLogicSM+0xde>
			{
				ballLogicSM_state = ball_downright;
 31e:	87 e0       	ldi	r24, 0x07	; 7
 320:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 324:	d1 c0       	rjmp	.+418    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
			}else if (paddle2POS==yPOS>>2) // top hit
 326:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <paddle2POS>
 32a:	28 2f       	mov	r18, r24
 32c:	26 95       	lsr	r18
 32e:	26 95       	lsr	r18
 330:	29 13       	cpse	r18, r25
 332:	04 c0       	rjmp	.+8      	; 0x33c <ballLogicSM+0xf4>
				{
					ballLogicSM_state = ball_downleft;
 334:	85 e0       	ldi	r24, 0x05	; 5
 336:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 33a:	d2 c0       	rjmp	.+420    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
				}else if (paddle2POS==yPOS>>1) // middle hit
 33c:	28 2f       	mov	r18, r24
 33e:	26 95       	lsr	r18
 340:	92 13       	cpse	r25, r18
 342:	04 c0       	rjmp	.+8      	; 0x34c <ballLogicSM+0x104>
				{
					ballLogicSM_state = ball_downleft;
 344:	85 e0       	ldi	r24, 0x05	; 5
 346:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 34a:	ca c0       	rjmp	.+404    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
				}else if (paddle2POS==yPOS) // bottom hit
 34c:	89 13       	cpse	r24, r25
 34e:	b0 c0       	rjmp	.+352    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
				{
					ballLogicSM_state = ball_upleft;
 350:	84 e0       	ldi	r24, 0x04	; 4
 352:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 356:	d0 c0       	rjmp	.+416    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
			
		}
		break;
		
		case ball_downright:
		if (yPOS>1 && xPOS<6)
 358:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <yPOS>
 35c:	82 30       	cpi	r24, 0x02	; 2
 35e:	28 f0       	brcs	.+10     	; 0x36a <ballLogicSM+0x122>
 360:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <xPOS>
 364:	96 30       	cpi	r25, 0x06	; 6
 366:	08 f4       	brcc	.+2      	; 0x36a <ballLogicSM+0x122>
 368:	af c0       	rjmp	.+350    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
		{
			ballLogicSM_state = ball_downright;
			} else {
				if (xPOS!=6)
 36a:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <xPOS>
 36e:	96 30       	cpi	r25, 0x06	; 6
 370:	21 f0       	breq	.+8      	; 0x37a <ballLogicSM+0x132>
				{
					ballLogicSM_state = ball_upright;
 372:	86 e0       	ldi	r24, 0x06	; 6
 374:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 378:	9b c0       	rjmp	.+310    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
				}else if (paddle2POS==yPOS>>2) // top hit
 37a:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <paddle2POS>
 37e:	28 2f       	mov	r18, r24
 380:	26 95       	lsr	r18
 382:	26 95       	lsr	r18
 384:	29 13       	cpse	r18, r25
 386:	04 c0       	rjmp	.+8      	; 0x390 <ballLogicSM+0x148>
				{
					ballLogicSM_state = ball_downleft;
 388:	85 e0       	ldi	r24, 0x05	; 5
 38a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 38e:	a8 c0       	rjmp	.+336    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
				}else if (paddle2POS==yPOS>>1) // middle hit
 390:	28 2f       	mov	r18, r24
 392:	26 95       	lsr	r18
 394:	92 13       	cpse	r25, r18
 396:	04 c0       	rjmp	.+8      	; 0x3a0 <ballLogicSM+0x158>
				{
					ballLogicSM_state = ball_upleft;
 398:	84 e0       	ldi	r24, 0x04	; 4
 39a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 39e:	ac c0       	rjmp	.+344    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
				}else if (paddle2POS==yPOS) // bottom hit
 3a0:	89 13       	cpse	r24, r25
 3a2:	92 c0       	rjmp	.+292    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
				{
					ballLogicSM_state = ball_upleft;
 3a4:	84 e0       	ldi	r24, 0x04	; 4
 3a6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 3aa:	a6 c0       	rjmp	.+332    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
				}
			
		}
		break;
		case  ball_downleft:
		if (yPOS>1 && xPOS>1)
 3ac:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <yPOS>
 3b0:	82 30       	cpi	r24, 0x02	; 2
 3b2:	28 f0       	brcs	.+10     	; 0x3be <ballLogicSM+0x176>
 3b4:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <xPOS>
 3b8:	92 30       	cpi	r25, 0x02	; 2
 3ba:	08 f0       	brcs	.+2      	; 0x3be <ballLogicSM+0x176>
 3bc:	91 c0       	rjmp	.+290    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
		{
			ballLogicSM_state = ball_downleft;
			
		}else 
		{
			if(xPOS!=1){
 3be:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <xPOS>
 3c2:	91 30       	cpi	r25, 0x01	; 1
 3c4:	21 f0       	breq	.+8      	; 0x3ce <ballLogicSM+0x186>
				ballLogicSM_state = ball_upleft;
 3c6:	84 e0       	ldi	r24, 0x04	; 4
 3c8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 3cc:	95 c0       	rjmp	.+298    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
			} else if (paddle1POS==yPOS>>2) // top hit
 3ce:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <paddle1POS>
 3d2:	28 2f       	mov	r18, r24
 3d4:	26 95       	lsr	r18
 3d6:	26 95       	lsr	r18
 3d8:	29 13       	cpse	r18, r25
 3da:	04 c0       	rjmp	.+8      	; 0x3e4 <ballLogicSM+0x19c>
			{
				ballLogicSM_state = ball_downright;
 3dc:	87 e0       	ldi	r24, 0x07	; 7
 3de:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 3e2:	72 c0       	rjmp	.+228    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
			}else if (paddle1POS==yPOS>>1) // middle hit
 3e4:	28 2f       	mov	r18, r24
 3e6:	26 95       	lsr	r18
 3e8:	92 13       	cpse	r25, r18
 3ea:	04 c0       	rjmp	.+8      	; 0x3f4 <ballLogicSM+0x1ac>
			{
				ballLogicSM_state = ball_upright;
 3ec:	86 e0       	ldi	r24, 0x06	; 6
 3ee:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 3f2:	5e c0       	rjmp	.+188    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
			}else if (paddle1POS==yPOS) // bottom hit
 3f4:	89 13       	cpse	r24, r25
 3f6:	74 c0       	rjmp	.+232    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
			{
				ballLogicSM_state = ball_upright;
 3f8:	86 e0       	ldi	r24, 0x06	; 6
 3fa:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 3fe:	58 c0       	rjmp	.+176    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
			
		}
		break;
		
		case ball_upleft:
		if (yPOS<128 && xPOS>1)
 400:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <yPOS>
 404:	88 23       	and	r24, r24
 406:	2c f0       	brlt	.+10     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 408:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <xPOS>
 40c:	92 30       	cpi	r25, 0x02	; 2
 40e:	08 f0       	brcs	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 410:	73 c0       	rjmp	.+230    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
		{
			ballLogicSM_state = ball_upleft;
		}else {
			if (xPOS!=1)
 412:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <xPOS>
 416:	91 30       	cpi	r25, 0x01	; 1
 418:	21 f0       	breq	.+8      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
			{
				ballLogicSM_state = ball_downleft;
 41a:	85 e0       	ldi	r24, 0x05	; 5
 41c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 420:	5f c0       	rjmp	.+190    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
			}else if (paddle1POS==yPOS<<2) // bottom hit
 422:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <paddle1POS>
 426:	49 2f       	mov	r20, r25
 428:	50 e0       	ldi	r21, 0x00	; 0
 42a:	28 2f       	mov	r18, r24
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	b9 01       	movw	r22, r18
 430:	66 0f       	add	r22, r22
 432:	77 1f       	adc	r23, r23
 434:	66 0f       	add	r22, r22
 436:	77 1f       	adc	r23, r23
 438:	46 17       	cp	r20, r22
 43a:	57 07       	cpc	r21, r23
 43c:	21 f4       	brne	.+8      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
				{
					ballLogicSM_state = ball_upright;
 43e:	86 e0       	ldi	r24, 0x06	; 6
 440:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 444:	35 c0       	rjmp	.+106    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
				}else if (paddle1POS==yPOS<<1) // middle hit
 446:	22 0f       	add	r18, r18
 448:	33 1f       	adc	r19, r19
 44a:	42 17       	cp	r20, r18
 44c:	53 07       	cpc	r21, r19
 44e:	21 f4       	brne	.+8      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
				{
					ballLogicSM_state = ball_downright;
 450:	87 e0       	ldi	r24, 0x07	; 7
 452:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 456:	38 c0       	rjmp	.+112    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
				}else if (paddle1POS==yPOS) // top hit
 458:	89 13       	cpse	r24, r25
 45a:	4e c0       	rjmp	.+156    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
				{
					ballLogicSM_state = ball_upright;
 45c:	86 e0       	ldi	r24, 0x06	; 6
 45e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 462:	26 c0       	rjmp	.+76     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
		ballLogicSM_state = player2win;
		break;
	}
		
	
	switch (ballLogicSM_state){
 464:	8e 2f       	mov	r24, r30
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	8a 30       	cpi	r24, 0x0A	; 10
 46a:	91 05       	cpc	r25, r1
 46c:	08 f0       	brcs	.+2      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 46e:	53 c0       	rjmp	.+166    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
 470:	fc 01       	movw	r30, r24
 472:	e0 5b       	subi	r30, 0xB0	; 176
 474:	ff 4f       	sbci	r31, 0xFF	; 255
 476:	a8 c1       	rjmp	.+848    	; 0x7c8 <__tablejump2__>
		case ball_init:
		xPOS = 3;
 478:	83 e0       	ldi	r24, 0x03	; 3
 47a:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <xPOS>
		yPOS = 16;
 47e:	80 e1       	ldi	r24, 0x10	; 16
 480:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <yPOS>
		ballPOS_update();
 484:	a6 ce       	rjmp	.-692    	; 0x1d2 <ballPOS_update>
		break;
 486:	08 95       	ret
		case  ball_wait:
		break;
		case ball_left:
		xPOS --;
 488:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xPOS>
 48c:	81 50       	subi	r24, 0x01	; 1
 48e:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <xPOS>
		yPOS = 16;
 492:	80 e1       	ldi	r24, 0x10	; 16
 494:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <yPOS>
		ballPOS_update();
 498:	9c ce       	rjmp	.-712    	; 0x1d2 <ballPOS_update>
		break;
 49a:	08 95       	ret
		case ball_right:
		xPOS ++;
 49c:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xPOS>
 4a0:	8f 5f       	subi	r24, 0xFF	; 255
 4a2:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <xPOS>
		yPOS = 16;
 4a6:	80 e1       	ldi	r24, 0x10	; 16
 4a8:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <yPOS>
		ballPOS_update();
 4ac:	92 ce       	rjmp	.-732    	; 0x1d2 <ballPOS_update>
		break;
 4ae:	08 95       	ret
		case ball_upright:
		xPOS ++;
 4b0:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xPOS>
 4b4:	8f 5f       	subi	r24, 0xFF	; 255
 4b6:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <xPOS>
		yPOS =yPOS*2;
 4ba:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <yPOS>
 4be:	88 0f       	add	r24, r24
 4c0:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <yPOS>
		ballPOS_update();
 4c4:	86 ce       	rjmp	.-756    	; 0x1d2 <ballPOS_update>
		break;
 4c6:	08 95       	ret
		case ball_downright:
		xPOS ++;
 4c8:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xPOS>
 4cc:	8f 5f       	subi	r24, 0xFF	; 255
 4ce:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <xPOS>
		yPOS =yPOS/2;
 4d2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <yPOS>
 4d6:	86 95       	lsr	r24
 4d8:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <yPOS>
		ballPOS_update();
 4dc:	7a ce       	rjmp	.-780    	; 0x1d2 <ballPOS_update>
		break;
 4de:	08 95       	ret
		case ball_downleft:
		xPOS --;
 4e0:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xPOS>
 4e4:	81 50       	subi	r24, 0x01	; 1
 4e6:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <xPOS>
		yPOS =yPOS/2;
 4ea:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <yPOS>
 4ee:	86 95       	lsr	r24
 4f0:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <yPOS>
		ballPOS_update();
 4f4:	6e ce       	rjmp	.-804    	; 0x1d2 <ballPOS_update>
		break;
 4f6:	08 95       	ret
		case ball_upleft:
		xPOS --;
 4f8:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xPOS>
 4fc:	81 50       	subi	r24, 0x01	; 1
 4fe:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <xPOS>
		yPOS =yPOS*2;
 502:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <yPOS>
 506:	88 0f       	add	r24, r24
 508:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <yPOS>
		ballPOS_update();
 50c:	62 ce       	rjmp	.-828    	; 0x1d2 <ballPOS_update>
		break;
 50e:	08 95       	ret
		case player1win:
		LED1_HIGH();
 510:	2b 9a       	sbi	0x05, 3	; 5
		break;
 512:	08 95       	ret
		case player2win:
		LED2_HIGH();
 514:	2c 9a       	sbi	0x05, 4	; 5
 516:	08 95       	ret

00000518 <ioSetup>:
	*/
	
}

void ioSetup() {
	 DDRB |= (1<<DDB0) | (1<<DDB1) | (1<<DDB2) | (1<<DDB3) | (1<<DDB4); //PORTB as output
 518:	84 b1       	in	r24, 0x04	; 4
 51a:	8f 61       	ori	r24, 0x1F	; 31
 51c:	84 b9       	out	0x04, r24	; 4
	
	 DDRA |= (1<<DDA0) | (1<<DDA1) | (1<<DDA2) | (1<<DDA3) | (1<<DDA4); 
 51e:	81 b1       	in	r24, 0x01	; 1
 520:	8f 61       	ori	r24, 0x1F	; 31
 522:	81 b9       	out	0x01, r24	; 1
 524:	08 95       	ret

00000526 <paddle1SM>:
	 //PORTA as input
	
}
void paddle1SM(){
	switch (paddle1SM_state){
 526:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <paddle1SM_state>
 52a:	82 30       	cpi	r24, 0x02	; 2
 52c:	59 f1       	breq	.+86     	; 0x584 <paddle1SM+0x5e>
 52e:	28 f4       	brcc	.+10     	; 0x53a <paddle1SM+0x14>
 530:	88 23       	and	r24, r24
 532:	41 f0       	breq	.+16     	; 0x544 <paddle1SM+0x1e>
 534:	81 30       	cpi	r24, 0x01	; 1
 536:	d1 f0       	breq	.+52     	; 0x56c <paddle1SM+0x46>
 538:	37 c0       	rjmp	.+110    	; 0x5a8 <paddle1SM+0x82>
 53a:	83 30       	cpi	r24, 0x03	; 3
 53c:	31 f1       	breq	.+76     	; 0x58a <paddle1SM+0x64>
 53e:	84 30       	cpi	r24, 0x04	; 4
 540:	81 f1       	breq	.+96     	; 0x5a2 <paddle1SM+0x7c>
 542:	32 c0       	rjmp	.+100    	; 0x5a8 <paddle1SM+0x82>
		case paddle1SM_wait:
		if (!up1 && !down1)
 544:	00 99       	sbic	0x00, 0	; 0
 546:	02 c0       	rjmp	.+4      	; 0x54c <paddle1SM+0x26>
 548:	01 9b       	sbis	0x00, 1	; 0
 54a:	4c c0       	rjmp	.+152    	; 0x5e4 <paddle1SM+0xbe>
		{
			paddle1SM_state = paddle1SM_wait;
		}else if (up1 && !down1)
 54c:	00 9b       	sbis	0x00, 0	; 0
 54e:	06 c0       	rjmp	.+12     	; 0x55c <paddle1SM+0x36>
 550:	01 99       	sbic	0x00, 1	; 0
 552:	04 c0       	rjmp	.+8      	; 0x55c <paddle1SM+0x36>
		{
			paddle1SM_state = up1_press;
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <paddle1SM_state>
 55a:	08 95       	ret
		
		}else if (down1 && !up1)
 55c:	01 9b       	sbis	0x00, 1	; 0
 55e:	42 c0       	rjmp	.+132    	; 0x5e4 <paddle1SM+0xbe>
 560:	00 99       	sbic	0x00, 0	; 0
 562:	40 c0       	rjmp	.+128    	; 0x5e4 <paddle1SM+0xbe>
		{
			paddle1SM_state = down1_press;
 564:	83 e0       	ldi	r24, 0x03	; 3
 566:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <paddle1SM_state>
 56a:	08 95       	ret
		}
		break;
		
		case  up1_press:
		if (up1 && !down1)
 56c:	00 9b       	sbis	0x00, 0	; 0
 56e:	02 c0       	rjmp	.+4      	; 0x574 <paddle1SM+0x4e>
 570:	01 9b       	sbis	0x00, 1	; 0
 572:	38 c0       	rjmp	.+112    	; 0x5e4 <paddle1SM+0xbe>
		{
			paddle1SM_state = up1_press;
		}else if (!up1 && !down1)
 574:	00 99       	sbic	0x00, 0	; 0
 576:	36 c0       	rjmp	.+108    	; 0x5e4 <paddle1SM+0xbe>
 578:	01 99       	sbic	0x00, 1	; 0
 57a:	34 c0       	rjmp	.+104    	; 0x5e4 <paddle1SM+0xbe>
		{
			paddle1SM_state = up1_release;
 57c:	82 e0       	ldi	r24, 0x02	; 2
 57e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <paddle1SM_state>
 582:	17 c0       	rjmp	.+46     	; 0x5b2 <paddle1SM+0x8c>
		}
		break;
		
		case up1_release:
			paddle1SM_state = paddle1SM_wait;
 584:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <paddle1SM_state>
			break;
 588:	08 95       	ret
		
		case down1_press:
		if (down1 && !up1)
 58a:	01 9b       	sbis	0x00, 1	; 0
 58c:	02 c0       	rjmp	.+4      	; 0x592 <paddle1SM+0x6c>
 58e:	00 9b       	sbis	0x00, 0	; 0
 590:	29 c0       	rjmp	.+82     	; 0x5e4 <paddle1SM+0xbe>
		{
			paddle1SM_state = down1_press;
		}else if (!down1 && !up1)
 592:	01 99       	sbic	0x00, 1	; 0
 594:	27 c0       	rjmp	.+78     	; 0x5e4 <paddle1SM+0xbe>
 596:	00 99       	sbic	0x00, 0	; 0
 598:	25 c0       	rjmp	.+74     	; 0x5e4 <paddle1SM+0xbe>
		{
			paddle1SM_state = down1_release;
 59a:	84 e0       	ldi	r24, 0x04	; 4
 59c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <paddle1SM_state>
 5a0:	15 c0       	rjmp	.+42     	; 0x5cc <paddle1SM+0xa6>
		}
		break;
		
		case  down1_release:
		paddle1SM_state = paddle1SM_wait;
 5a2:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <paddle1SM_state>
		break;
 5a6:	08 95       	ret
		
		
	}
switch (paddle1SM_state){ //actions
 5a8:	82 30       	cpi	r24, 0x02	; 2
 5aa:	19 f0       	breq	.+6      	; 0x5b2 <paddle1SM+0x8c>
 5ac:	84 30       	cpi	r24, 0x04	; 4
 5ae:	71 f0       	breq	.+28     	; 0x5cc <paddle1SM+0xa6>
 5b0:	08 95       	ret
		
		case  up1_press:
		break;
	
		case up1_release://upshift
		if (pattern[0]!=224){
 5b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 5b6:	80 3e       	cpi	r24, 0xE0	; 224
 5b8:	a9 f0       	breq	.+42     	; 0x5e4 <paddle1SM+0xbe>
			pattern[0]=pattern[0]<<1;
 5ba:	88 0f       	add	r24, r24
 5bc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			paddle1POS=paddle1POS<<1;
 5c0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <paddle1POS>
 5c4:	88 0f       	add	r24, r24
 5c6:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <paddle1POS>
 5ca:	08 95       	ret
	
		case down1_press:
		break;
	
		case  down1_release://downshift
		if (pattern[0]>7){
 5cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 5d0:	88 30       	cpi	r24, 0x08	; 8
 5d2:	40 f0       	brcs	.+16     	; 0x5e4 <paddle1SM+0xbe>
			pattern[0]=pattern[0]>>1;
 5d4:	86 95       	lsr	r24
 5d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			paddle1POS=paddle1POS>>1;
 5da:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <paddle1POS>
 5de:	86 95       	lsr	r24
 5e0:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <paddle1POS>
 5e4:	08 95       	ret

000005e6 <paddle2SM>:
	
	}
}

void paddle2SM(){
	switch (paddle2SM_state){
 5e6:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <paddle2SM_state>
 5ea:	82 30       	cpi	r24, 0x02	; 2
 5ec:	59 f1       	breq	.+86     	; 0x644 <paddle2SM+0x5e>
 5ee:	28 f4       	brcc	.+10     	; 0x5fa <paddle2SM+0x14>
 5f0:	88 23       	and	r24, r24
 5f2:	41 f0       	breq	.+16     	; 0x604 <paddle2SM+0x1e>
 5f4:	81 30       	cpi	r24, 0x01	; 1
 5f6:	d1 f0       	breq	.+52     	; 0x62c <paddle2SM+0x46>
 5f8:	37 c0       	rjmp	.+110    	; 0x668 <paddle2SM+0x82>
 5fa:	83 30       	cpi	r24, 0x03	; 3
 5fc:	31 f1       	breq	.+76     	; 0x64a <paddle2SM+0x64>
 5fe:	84 30       	cpi	r24, 0x04	; 4
 600:	81 f1       	breq	.+96     	; 0x662 <paddle2SM+0x7c>
 602:	32 c0       	rjmp	.+100    	; 0x668 <paddle2SM+0x82>
		case paddle2SM_wait:
		if (!up2 && !down2)
 604:	02 99       	sbic	0x00, 2	; 0
 606:	02 c0       	rjmp	.+4      	; 0x60c <paddle2SM+0x26>
 608:	03 9b       	sbis	0x00, 3	; 0
 60a:	4c c0       	rjmp	.+152    	; 0x6a4 <paddle2SM+0xbe>
		{
			paddle2SM_state = paddle2SM_wait;
		}else if (up2 && !down2)
 60c:	02 9b       	sbis	0x00, 2	; 0
 60e:	06 c0       	rjmp	.+12     	; 0x61c <paddle2SM+0x36>
 610:	03 99       	sbic	0x00, 3	; 0
 612:	04 c0       	rjmp	.+8      	; 0x61c <paddle2SM+0x36>
		{
			paddle2SM_state = up2_press;
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <paddle2SM_state>
 61a:	08 95       	ret
			
		}else if (down2 && !up2)
 61c:	03 9b       	sbis	0x00, 3	; 0
 61e:	42 c0       	rjmp	.+132    	; 0x6a4 <paddle2SM+0xbe>
 620:	02 99       	sbic	0x00, 2	; 0
 622:	40 c0       	rjmp	.+128    	; 0x6a4 <paddle2SM+0xbe>
		{
			paddle2SM_state = down2_press;
 624:	83 e0       	ldi	r24, 0x03	; 3
 626:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <paddle2SM_state>
 62a:	08 95       	ret
		}
		break;
		
		case  up2_press:
		if (up2 && !down2)
 62c:	02 9b       	sbis	0x00, 2	; 0
 62e:	02 c0       	rjmp	.+4      	; 0x634 <paddle2SM+0x4e>
 630:	03 9b       	sbis	0x00, 3	; 0
 632:	38 c0       	rjmp	.+112    	; 0x6a4 <paddle2SM+0xbe>
		{
			paddle2SM_state = up2_press;
		}else if (!up2 && !down2)
 634:	02 99       	sbic	0x00, 2	; 0
 636:	36 c0       	rjmp	.+108    	; 0x6a4 <paddle2SM+0xbe>
 638:	03 99       	sbic	0x00, 3	; 0
 63a:	34 c0       	rjmp	.+104    	; 0x6a4 <paddle2SM+0xbe>
		{
			paddle2SM_state = up2_release;
 63c:	82 e0       	ldi	r24, 0x02	; 2
 63e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <paddle2SM_state>
 642:	17 c0       	rjmp	.+46     	; 0x672 <paddle2SM+0x8c>
		}
		break;
		
		case up2_release:
		paddle2SM_state = paddle2SM_wait;
 644:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <paddle2SM_state>
		break;
 648:	08 95       	ret
		
		case down2_press:
		if (down2 && !up2)
 64a:	03 9b       	sbis	0x00, 3	; 0
 64c:	02 c0       	rjmp	.+4      	; 0x652 <paddle2SM+0x6c>
 64e:	02 9b       	sbis	0x00, 2	; 0
 650:	29 c0       	rjmp	.+82     	; 0x6a4 <paddle2SM+0xbe>
		{
			paddle2SM_state = down2_press;
		}else if (!down2 && !up2)
 652:	03 99       	sbic	0x00, 3	; 0
 654:	27 c0       	rjmp	.+78     	; 0x6a4 <paddle2SM+0xbe>
 656:	02 99       	sbic	0x00, 2	; 0
 658:	25 c0       	rjmp	.+74     	; 0x6a4 <paddle2SM+0xbe>
		{
			paddle2SM_state = down2_release;
 65a:	84 e0       	ldi	r24, 0x04	; 4
 65c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <paddle2SM_state>
 660:	15 c0       	rjmp	.+42     	; 0x68c <paddle2SM+0xa6>
		}
		break;
		
		case  down2_release:
		paddle2SM_state = paddle2SM_wait;
 662:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <paddle2SM_state>
		break;
 666:	08 95       	ret
		
		
	}
	switch (paddle2SM_state){ //actions
 668:	82 30       	cpi	r24, 0x02	; 2
 66a:	19 f0       	breq	.+6      	; 0x672 <paddle2SM+0x8c>
 66c:	84 30       	cpi	r24, 0x04	; 4
 66e:	71 f0       	breq	.+28     	; 0x68c <paddle2SM+0xa6>
 670:	08 95       	ret
		
		case  up2_press:
		break;
		
		case up2_release://upshift
		if (pattern[7]!=224){
 672:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
 676:	80 3e       	cpi	r24, 0xE0	; 224
 678:	a9 f0       	breq	.+42     	; 0x6a4 <paddle2SM+0xbe>
			pattern[7]=pattern[7]<<1;
 67a:	88 0f       	add	r24, r24
 67c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__data_start+0x7>
			paddle2POS=paddle2POS<<1;
 680:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <paddle2POS>
 684:	88 0f       	add	r24, r24
 686:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <paddle2POS>
 68a:	08 95       	ret
		
		case down2_press:
		break;
		
		case  down2_release://downshift
		if (pattern[7]!=7){
 68c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
 690:	87 30       	cpi	r24, 0x07	; 7
 692:	41 f0       	breq	.+16     	; 0x6a4 <paddle2SM+0xbe>
			pattern[7]=pattern[7]>>1;
 694:	86 95       	lsr	r24
 696:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__data_start+0x7>
			paddle2POS=paddle2POS>>1;
 69a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <paddle2POS>
 69e:	86 95       	lsr	r24
 6a0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <paddle2POS>
 6a4:	08 95       	ret

000006a6 <store_SM>:
	}
	return 0;
}

void store_SM() {
	switch (store_state){
 6a6:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <store_state>
 6aa:	81 30       	cpi	r24, 0x01	; 1
 6ac:	41 f0       	breq	.+16     	; 0x6be <store_SM+0x18>
 6ae:	18 f0       	brcs	.+6      	; 0x6b6 <store_SM+0x10>
 6b0:	82 30       	cpi	r24, 0x02	; 2
 6b2:	49 f0       	breq	.+18     	; 0x6c6 <store_SM+0x20>
 6b4:	0c c0       	rjmp	.+24     	; 0x6ce <store_SM+0x28>
		case store_init:
		store_state = store_high;
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <store_state>
		break;
 6bc:	0d c0       	rjmp	.+26     	; 0x6d8 <store_SM+0x32>
		case store_high:
		store_state = store_low;
 6be:	82 e0       	ldi	r24, 0x02	; 2
 6c0:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <store_state>
 6c4:	0b c0       	rjmp	.+22     	; 0x6dc <store_SM+0x36>
		break;
		case  store_low:
		store_state = store_high;
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <store_state>
		break;
 6cc:	05 c0       	rjmp	.+10     	; 0x6d8 <store_SM+0x32>
		
	}
	switch (store_state){
 6ce:	81 30       	cpi	r24, 0x01	; 1
 6d0:	19 f0       	breq	.+6      	; 0x6d8 <store_SM+0x32>
 6d2:	82 30       	cpi	r24, 0x02	; 2
 6d4:	21 f4       	brne	.+8      	; 0x6de <store_SM+0x38>
 6d6:	02 c0       	rjmp	.+4      	; 0x6dc <store_SM+0x36>
		case  store_init:
		break;
		case store_high:
		STORE_HIGH();
 6d8:	29 9a       	sbi	0x05, 1	; 5
		break;
 6da:	08 95       	ret
		case  store_low:
		STORE_LOW();
 6dc:	29 98       	cbi	0x05, 1	; 5
 6de:	08 95       	ret

000006e0 <shiftOut>:
	
//	_delay_ms(1);
}
 
void shiftOut(uint8_t val)
{
 6e0:	20 e0       	ldi	r18, 0x00	; 0
 6e2:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		 if(!!(val & (1 << i))){
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	ac 01       	movw	r20, r24
 6e8:	02 2e       	mov	r0, r18
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <shiftOut+0x10>
 6ec:	55 95       	asr	r21
 6ee:	47 95       	ror	r20
 6f0:	0a 94       	dec	r0
 6f2:	e2 f7       	brpl	.-8      	; 0x6ec <shiftOut+0xc>
 6f4:	40 ff       	sbrs	r20, 0
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <shiftOut+0x1c>
			 DATA_HIGH();
 6f8:	28 9a       	sbi	0x05, 0	; 5
 6fa:	01 c0       	rjmp	.+2      	; 0x6fe <shiftOut+0x1e>
			 }else{
			 DATA_LOW();
 6fc:	28 98       	cbi	0x05, 0	; 5
		 }
		SHIFT_HIGH();
 6fe:	2a 9a       	sbi	0x05, 2	; 5
		SHIFT_LOW();
 700:	2a 98       	cbi	0x05, 2	; 5
 702:	2f 5f       	subi	r18, 0xFF	; 255
 704:	3f 4f       	sbci	r19, 0xFF	; 255
 
void shiftOut(uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
 706:	28 30       	cpi	r18, 0x08	; 8
 708:	31 05       	cpc	r19, r1
 70a:	69 f7       	brne	.-38     	; 0x6e6 <shiftOut+0x6>
			 DATA_LOW();
		 }
		SHIFT_HIGH();
		SHIFT_LOW();
	}
 70c:	08 95       	ret

0000070e <main>:
		
	}
}

int main() {
	ioSetup();
 70e:	04 df       	rcall	.-504    	; 0x518 <ioSetup>
	
	const unsigned long timerPeriod = 1;
	TimerSet(timerPeriod); TimerOn();
 710:	61 e0       	ldi	r22, 0x01	; 1
 712:	70 e0       	ldi	r23, 0x00	; 0
 714:	80 e0       	ldi	r24, 0x00	; 0
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	4b dd       	rcall	.-1386   	; 0x1b0 <TimerSet>
 71a:	ea dc       	rcall	.-1580   	; 0xf0 <TimerOn>
	store_state = store_init;
 71c:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <store_state>
	paddle1SM_state = paddle1SM_wait;
 720:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <paddle1SM_state>
	paddle2SM_state = paddle2SM_wait;
 724:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <paddle2SM_state>
	ballLogicSM_state = ball_init;
 728:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <ballLogicSM_state>
	LED1_LOW();
 72c:	2b 98       	cbi	0x05, 3	; 5
	LED2_LOW();
 72e:	2c 98       	cbi	0x05, 4	; 5
	paddle1POS=16;
 730:	80 e1       	ldi	r24, 0x10	; 16
 732:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <paddle1POS>
	paddle2POS=16;
 736:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <paddle2POS>
	xPOS = 3;
 73a:	93 e0       	ldi	r25, 0x03	; 3
 73c:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <xPOS>
	yPOS = 16;
 740:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <yPOS>
	ballPOS_update();
 744:	46 dd       	rcall	.-1396   	; 0x1d2 <ballPOS_update>
		paddle2SM();
		
		for (int i=0; i<8; i++) {
			
			shiftOut( ~pattern[i]);
			shiftOut( 128 >> i);
 746:	68 94       	set
 748:	ee 24       	eor	r14, r14
 74a:	e7 f8       	bld	r14, 7
 74c:	f1 2c       	mov	r15, r1
			while(store_SM_elapsedTime>=1){
				store_SM();
				store_SM();
				store_SM_elapsedTime=0;
			}
			store_SM_elapsedTime += timerPeriod;
 74e:	bb 24       	eor	r11, r11
		}
		
		while (ballLogicSM_elapsedTime>=300){
 750:	b3 94       	inc	r11
	yPOS = 16;
	ballPOS_update();
	
	
	while (1){
		softRest();
 752:	c1 2c       	mov	r12, r1
 754:	d1 2c       	mov	r13, r1
		paddle1SM();
 756:	5d dd       	rcall	.-1350   	; 0x212 <softRest>
 758:	e6 de       	rcall	.-564    	; 0x526 <paddle1SM>
		paddle2SM();
 75a:	45 df       	rcall	.-374    	; 0x5e6 <paddle2SM>
 75c:	00 e0       	ldi	r16, 0x00	; 0
 75e:	11 e0       	ldi	r17, 0x01	; 1
		
		for (int i=0; i<8; i++) {
 760:	c0 e0       	ldi	r28, 0x00	; 0
 762:	d0 e0       	ldi	r29, 0x00	; 0
			
			shiftOut( ~pattern[i]);
 764:	f8 01       	movw	r30, r16
 766:	81 91       	ld	r24, Z+
 768:	8f 01       	movw	r16, r30
 76a:	80 95       	com	r24
 76c:	b9 df       	rcall	.-142    	; 0x6e0 <shiftOut>
			shiftOut( 128 >> i);
 76e:	c7 01       	movw	r24, r14
 770:	0c 2e       	mov	r0, r28
 772:	02 c0       	rjmp	.+4      	; 0x778 <main+0x6a>
 774:	95 95       	asr	r25
 776:	87 95       	ror	r24
 778:	0a 94       	dec	r0
 77a:	e2 f7       	brpl	.-8      	; 0x774 <main+0x66>
 77c:	b1 df       	rcall	.-158    	; 0x6e0 <shiftOut>
 77e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <store_SM_elapsedTime>
			while(store_SM_elapsedTime>=1){
 782:	81 11       	cpse	r24, r1
 784:	1e c0       	rjmp	.+60     	; 0x7c2 <main+0xb4>
 786:	b0 92 14 01 	sts	0x0114, r11	; 0x800114 <store_SM_elapsedTime>
				store_SM();
				store_SM();
				store_SM_elapsedTime=0;
			}
			store_SM_elapsedTime += timerPeriod;
 78a:	21 96       	adiw	r28, 0x01	; 1
	while (1){
		softRest();
		paddle1SM();
		paddle2SM();
		
		for (int i=0; i<8; i++) {
 78c:	c8 30       	cpi	r28, 0x08	; 8
 78e:	d1 05       	cpc	r29, r1
 790:	49 f7       	brne	.-46     	; 0x764 <main+0x56>
 792:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <ballLogicSM_elapsedTime>
				store_SM_elapsedTime=0;
			}
			store_SM_elapsedTime += timerPeriod;
		}
		
		while (ballLogicSM_elapsedTime>=300){
 796:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <ballLogicSM_elapsedTime+0x1>
 79a:	8c 32       	cpi	r24, 0x2C	; 44
 79c:	21 e0       	ldi	r18, 0x01	; 1
 79e:	92 07       	cpc	r25, r18
 7a0:	60 f4       	brcc	.+24     	; 0x7ba <main+0xac>
 7a2:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <TimerFlag>
			ballLogicSM();
			
			ballLogicSM_elapsedTime = 0;
		}
		
		while(!TimerFlag);
 7a6:	22 23       	and	r18, r18
 7a8:	e1 f3       	breq	.-8      	; 0x7a2 <main+0x94>
		TimerFlag = 0;
 7aa:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <TimerFlag>
		ballLogicSM_elapsedTime += timerPeriod;
 7ae:	01 96       	adiw	r24, 0x01	; 1
 7b0:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <ballLogicSM_elapsedTime+0x1>
	}
 7b4:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <ballLogicSM_elapsedTime>
			}
			store_SM_elapsedTime += timerPeriod;
		}
		
		while (ballLogicSM_elapsedTime>=300){
			ballLogicSM();
 7b8:	ce cf       	rjmp	.-100    	; 0x756 <main+0x48>
				store_SM_elapsedTime=0;
			}
			store_SM_elapsedTime += timerPeriod;
		}
		
		while (ballLogicSM_elapsedTime>=300){
 7ba:	46 dd       	rcall	.-1396   	; 0x248 <ballLogicSM>
 7bc:	8c 2d       	mov	r24, r12
 7be:	9d 2d       	mov	r25, r13
		for (int i=0; i<8; i++) {
			
			shiftOut( ~pattern[i]);
			shiftOut( 128 >> i);
			while(store_SM_elapsedTime>=1){
				store_SM();
 7c0:	f0 cf       	rjmp	.-32     	; 0x7a2 <main+0x94>
 7c2:	71 df       	rcall	.-286    	; 0x6a6 <store_SM>
				store_SM();
 7c4:	70 df       	rcall	.-288    	; 0x6a6 <store_SM>
 7c6:	df cf       	rjmp	.-66     	; 0x786 <main+0x78>

000007c8 <__tablejump2__>:
 7c8:	ee 0f       	add	r30, r30
 7ca:	ff 1f       	adc	r31, r31
 7cc:	00 24       	eor	r0, r0
 7ce:	00 1c       	adc	r0, r0
 7d0:	0b be       	out	0x3b, r0	; 59
 7d2:	07 90       	elpm	r0, Z+
 7d4:	f6 91       	elpm	r31, Z
 7d6:	e0 2d       	mov	r30, r0
 7d8:	09 94       	ijmp

000007da <_exit>:
 7da:	f8 94       	cli

000007dc <__stop_program>:
 7dc:	ff cf       	rjmp	.-2      	; 0x7dc <__stop_program>
