
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000007b0  00000844  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080010c  0080010c  00000850  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000880  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c94  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000914  00000000  00000000  000015dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008cd  00000000  00000000  00001ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  000027c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ca  00000000  00000000  000028d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000be  00000000  00000000  00002f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	70 c0       	rjmp	.+224    	; 0xe6 <__bad_interrupt>
   6:	00 00       	nop
   8:	6e c0       	rjmp	.+220    	; 0xe6 <__bad_interrupt>
   a:	00 00       	nop
   c:	6c c0       	rjmp	.+216    	; 0xe6 <__bad_interrupt>
   e:	00 00       	nop
  10:	6a c0       	rjmp	.+212    	; 0xe6 <__bad_interrupt>
  12:	00 00       	nop
  14:	68 c0       	rjmp	.+208    	; 0xe6 <__bad_interrupt>
  16:	00 00       	nop
  18:	66 c0       	rjmp	.+204    	; 0xe6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	64 c0       	rjmp	.+200    	; 0xe6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	62 c0       	rjmp	.+196    	; 0xe6 <__bad_interrupt>
  22:	00 00       	nop
  24:	60 c0       	rjmp	.+192    	; 0xe6 <__bad_interrupt>
  26:	00 00       	nop
  28:	5e c0       	rjmp	.+188    	; 0xe6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5c c0       	rjmp	.+184    	; 0xe6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	5a c0       	rjmp	.+180    	; 0xe6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7d c0       	rjmp	.+250    	; 0x130 <__vector_13>
  36:	00 00       	nop
  38:	56 c0       	rjmp	.+172    	; 0xe6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	54 c0       	rjmp	.+168    	; 0xe6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	52 c0       	rjmp	.+164    	; 0xe6 <__bad_interrupt>
  42:	00 00       	nop
  44:	50 c0       	rjmp	.+160    	; 0xe6 <__bad_interrupt>
  46:	00 00       	nop
  48:	4e c0       	rjmp	.+156    	; 0xe6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4c c0       	rjmp	.+152    	; 0xe6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	4a c0       	rjmp	.+148    	; 0xe6 <__bad_interrupt>
  52:	00 00       	nop
  54:	48 c0       	rjmp	.+144    	; 0xe6 <__bad_interrupt>
  56:	00 00       	nop
  58:	46 c0       	rjmp	.+140    	; 0xe6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	44 c0       	rjmp	.+136    	; 0xe6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	42 c0       	rjmp	.+132    	; 0xe6 <__bad_interrupt>
  62:	00 00       	nop
  64:	40 c0       	rjmp	.+128    	; 0xe6 <__bad_interrupt>
  66:	00 00       	nop
  68:	3e c0       	rjmp	.+124    	; 0xe6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3c c0       	rjmp	.+120    	; 0xe6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	3a c0       	rjmp	.+116    	; 0xe6 <__bad_interrupt>
  72:	00 00       	nop
  74:	38 c0       	rjmp	.+112    	; 0xe6 <__bad_interrupt>
  76:	00 00       	nop
  78:	36 c0       	rjmp	.+108    	; 0xe6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	34 c0       	rjmp	.+104    	; 0xe6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	32 c0       	rjmp	.+100    	; 0xe6 <__bad_interrupt>
  82:	00 00       	nop
  84:	30 c0       	rjmp	.+96     	; 0xe6 <__bad_interrupt>
  86:	00 00       	nop
  88:	2e c0       	rjmp	.+92     	; 0xe6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2a 01       	movw	r4, r20
  8e:	2e 01       	movw	r4, r28
  90:	32 01       	movw	r6, r4
  92:	55 01       	movw	r10, r10
  94:	ef 01       	movw	r28, r30
  96:	c5 01       	movw	r24, r10
  98:	78 01       	movw	r14, r16
  9a:	a2 01       	movw	r20, r4
  9c:	2b 02       	muls	r18, r27
  9e:	76 02       	muls	r23, r22
  a0:	33 02       	muls	r19, r19
  a2:	3d 02       	muls	r19, r29
  a4:	6b 02       	muls	r22, r27
  a6:	5f 02       	muls	r21, r31
  a8:	47 02       	muls	r20, r23
  aa:	53 02       	muls	r21, r19

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	d0 e4       	ldi	r29, 0x40	; 64
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e0 eb       	ldi	r30, 0xB0	; 176
  c0:	f7 e0       	ldi	r31, 0x07	; 7
  c2:	00 e0       	ldi	r16, 0x00	; 0
  c4:	0b bf       	out	0x3b, r16	; 59
  c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x14>
  c8:	07 90       	elpm	r0, Z+
  ca:	0d 92       	st	X+, r0
  cc:	ac 30       	cpi	r26, 0x0C	; 12
  ce:	b1 07       	cpc	r27, r17
  d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x10>

000000d2 <__do_clear_bss>:
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	ac e0       	ldi	r26, 0x0C	; 12
  d6:	b1 e0       	ldi	r27, 0x01	; 1
  d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
  da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
  dc:	ac 31       	cpi	r26, 0x1C	; 28
  de:	b2 07       	cpc	r27, r18
  e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
  e2:	00 d3       	rcall	.+1536   	; 0x6e4 <main>
  e4:	63 c3       	rjmp	.+1734   	; 0x7ac <_exit>

000000e6 <__bad_interrupt>:
  e6:	8c cf       	rjmp	.-232    	; 0x0 <__vectors>

000000e8 <TimerOn>:
void TimerOff(){
	TCCR1B = 0x00;
}

void TimerISR(){
	TimerFlag = 1;
  e8:	8b e0       	ldi	r24, 0x0B	; 11
  ea:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ee:	8d e7       	ldi	r24, 0x7D	; 125
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 100:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 104:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 108:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_avr_timer_M>
 10c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_avr_timer_M+0x1>
 110:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <_avr_timer_M+0x2>
 114:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <_avr_timer_M+0x3>
 118:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 11c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 120:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <__data_end+0x2>
 124:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <__data_end+0x3>
 128:	8f b7       	in	r24, 0x3f	; 63
 12a:	80 68       	ori	r24, 0x80	; 128
 12c:	8f bf       	out	0x3f, r24	; 63
 12e:	08 95       	ret

00000130 <__vector_13>:

}

ISR(TIMER1_COMPA_vect){
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	af 93       	push	r26
 140:	bf 93       	push	r27
	_avr_timer_cntcurr--;
 142:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 146:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 14a:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <__data_end+0x2>
 14e:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <__data_end+0x3>
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	a1 09       	sbc	r26, r1
 156:	b1 09       	sbc	r27, r1
 158:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 15c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 160:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <__data_end+0x2>
 164:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <__data_end+0x3>
	if (_avr_timer_cntcurr== 0)
 168:	89 2b       	or	r24, r25
 16a:	8a 2b       	or	r24, r26
 16c:	8b 2b       	or	r24, r27
 16e:	99 f4       	brne	.+38     	; 0x196 <__vector_13+0x66>
void TimerOff(){
	TCCR1B = 0x00;
}

void TimerISR(){
	TimerFlag = 1;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <TimerFlag>
ISR(TIMER1_COMPA_vect){
	_avr_timer_cntcurr--;
	if (_avr_timer_cntcurr== 0)
	{
		TimerISR();
		_avr_timer_cntcurr=_avr_timer_M;
 176:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_avr_timer_M>
 17a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_avr_timer_M+0x1>
 17e:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <_avr_timer_M+0x2>
 182:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <_avr_timer_M+0x3>
 186:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 18a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 18e:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <__data_end+0x2>
 192:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <__data_end+0x3>
	}
}
 196:	bf 91       	pop	r27
 198:	af 91       	pop	r26
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <TimerSet>:

void TimerSet(unsigned long M){
	_avr_timer_M=M;
 1a8:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <_avr_timer_M>
 1ac:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <_avr_timer_M+0x1>
 1b0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_avr_timer_M+0x2>
 1b4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 1b8:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <__data_end>
 1bc:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <__data_end+0x1>
 1c0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end+0x2>
 1c4:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x3>
 1c8:	08 95       	ret

000001ca <ballPOS_update>:
	pattern[i]=0;	
	i++;
	}
	*/
	
	pattern [xPOS]=(yPOS)<<0;
 1ca:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xPOS>
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	fc 01       	movw	r30, r24
 1d2:	e0 50       	subi	r30, 0x00	; 0
 1d4:	ff 4f       	sbci	r31, 0xFF	; 255
 1d6:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <yPOS>
 1da:	20 83       	st	Z, r18
	if (ballLogicSM_state == ball_left || ballLogicSM_state == ball_upleft || ballLogicSM_state == ball_downleft)
 1dc:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <ballLogicSM_state>
 1e0:	22 30       	cpi	r18, 0x02	; 2
 1e2:	21 f0       	breq	.+8      	; 0x1ec <ballPOS_update+0x22>
 1e4:	3c ef       	ldi	r19, 0xFC	; 252
 1e6:	32 0f       	add	r19, r18
 1e8:	32 30       	cpi	r19, 0x02	; 2
 1ea:	28 f4       	brcc	.+10     	; 0x1f6 <ballPOS_update+0x2c>
	{
		pattern[xPOS+1]=0;
 1ec:	fc 01       	movw	r30, r24
 1ee:	e0 50       	subi	r30, 0x00	; 0
 1f0:	ff 4f       	sbci	r31, 0xFF	; 255
 1f2:	11 82       	std	Z+1, r1	; 0x01
 1f4:	08 95       	ret
	}else if (ballLogicSM_state == ball_right || ballLogicSM_state == ball_upright || ballLogicSM_state == ball_downright)
 1f6:	23 30       	cpi	r18, 0x03	; 3
 1f8:	19 f0       	breq	.+6      	; 0x200 <ballPOS_update+0x36>
 1fa:	26 50       	subi	r18, 0x06	; 6
 1fc:	22 30       	cpi	r18, 0x02	; 2
 1fe:	20 f4       	brcc	.+8      	; 0x208 <ballPOS_update+0x3e>
	{
		pattern[xPOS-1]=0;
 200:	fc 01       	movw	r30, r24
 202:	e1 50       	subi	r30, 0x01	; 1
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	10 82       	st	Z, r1
 208:	08 95       	ret

0000020a <softRest>:
			0b00000000,
			0b00111000,
			};

void softRest(){
	if (reset)
 20a:	04 9b       	sbis	0x00, 4	; 0
 20c:	16 c0       	rjmp	.+44     	; 0x23a <softRest+0x30>
	{
		paddle1SM_state = paddle1SM_wait;
 20e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <paddle1SM_state>
		paddle2SM_state = paddle2SM_wait;
 212:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <paddle2SM_state>
		ballLogicSM_state = ball_init;
 216:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <ballLogicSM_state>
		paddle1POS=16;
 21a:	80 e1       	ldi	r24, 0x10	; 16
 21c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <paddle1POS>
		paddle2POS=16;
 220:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <paddle2POS>
		xPOS = 3;
 224:	93 e0       	ldi	r25, 0x03	; 3
 226:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <xPOS>
		yPOS = 16;
 22a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <yPOS>
		ballPOS_update();
 22e:	cd df       	rcall	.-102    	; 0x1ca <ballPOS_update>
		pattern[0]=0b00111000;
 230:	e0 e0       	ldi	r30, 0x00	; 0
 232:	f1 e0       	ldi	r31, 0x01	; 1
 234:	88 e3       	ldi	r24, 0x38	; 56
 236:	80 83       	st	Z, r24
		pattern[7]=0b00111000;
 238:	87 83       	std	Z+7, r24	; 0x07
 23a:	08 95       	ret

0000023c <ballLogicSM>:
	}
	
}	
 
void ballLogicSM(){
	switch (ballLogicSM_state){
 23c:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <ballLogicSM_state>
 240:	8e 2f       	mov	r24, r30
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	88 30       	cpi	r24, 0x08	; 8
 246:	91 05       	cpc	r25, r1
 248:	08 f0       	brcs	.+2      	; 0x24c <ballLogicSM+0x10>
 24a:	fb c0       	rjmp	.+502    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 24c:	fc 01       	movw	r30, r24
 24e:	ea 5b       	subi	r30, 0xBA	; 186
 250:	ff 4f       	sbci	r31, 0xFF	; 255
 252:	a3 c2       	rjmp	.+1350   	; 0x79a <__tablejump2__>
		case ball_init:
		ballLogicSM_state = ball_wait;
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 25a:	08 95       	ret
		break;
		case  ball_wait:
		ballLogicSM_state = ball_left;
 25c:	82 e0       	ldi	r24, 0x02	; 2
 25e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
		break;
 262:	01 c1       	rjmp	.+514    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
		case ball_left:
		if (xPOS>1)
 264:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xPOS>
 268:	82 30       	cpi	r24, 0x02	; 2
 26a:	08 f0       	brcs	.+2      	; 0x26e <ballLogicSM+0x32>
 26c:	fc c0       	rjmp	.+504    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
		{
			ballLogicSM_state = ball_left;
		}else {
			if (paddle1POS == yPOS)
 26e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <paddle1POS>
 272:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <yPOS>
 276:	98 13       	cpse	r25, r24
 278:	04 c0       	rjmp	.+8      	; 0x282 <ballLogicSM+0x46>
			{
				ballLogicSM_state = ball_right;
 27a:	83 e0       	ldi	r24, 0x03	; 3
 27c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 280:	fc c0       	rjmp	.+504    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
			}else if (paddle1POS == yPOS<<1) //hit paddle1 bottom //(paddle1POS<<1) == yPOS
 282:	49 2f       	mov	r20, r25
 284:	50 e0       	ldi	r21, 0x00	; 0
 286:	28 2f       	mov	r18, r24
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	22 0f       	add	r18, r18
 28c:	33 1f       	adc	r19, r19
 28e:	42 17       	cp	r20, r18
 290:	53 07       	cpc	r21, r19
 292:	21 f4       	brne	.+8      	; 0x29c <ballLogicSM+0x60>
			{
				ballLogicSM_state = ball_upright;
 294:	86 e0       	ldi	r24, 0x06	; 6
 296:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 29a:	f9 c0       	rjmp	.+498    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
			}else if (paddle1POS == yPOS>>1)
 29c:	86 95       	lsr	r24
 29e:	98 13       	cpse	r25, r24
 2a0:	e2 c0       	rjmp	.+452    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
			{
				ballLogicSM_state = ball_downright;
 2a2:	87 e0       	ldi	r24, 0x07	; 7
 2a4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 2a8:	fe c0       	rjmp	.+508    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
			}
			
		}
		break;
		case ball_right:
		if (xPOS!=6)
 2aa:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xPOS>
 2ae:	86 30       	cpi	r24, 0x06	; 6
 2b0:	09 f0       	breq	.+2      	; 0x2b4 <ballLogicSM+0x78>
 2b2:	e3 c0       	rjmp	.+454    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
		{
			ballLogicSM_state = ball_right;
			}else {
			if (paddle2POS == yPOS ) //test middle hit
 2b4:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <paddle2POS>
 2b8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <yPOS>
 2bc:	98 13       	cpse	r25, r24
 2be:	04 c0       	rjmp	.+8      	; 0x2c8 <ballLogicSM+0x8c>
			{
				ballLogicSM_state = ball_left;
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 2c6:	cf c0       	rjmp	.+414    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
			}else if (paddle2POS == yPOS<<1) 
 2c8:	49 2f       	mov	r20, r25
 2ca:	50 e0       	ldi	r21, 0x00	; 0
 2cc:	28 2f       	mov	r18, r24
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	22 0f       	add	r18, r18
 2d2:	33 1f       	adc	r19, r19
 2d4:	42 17       	cp	r20, r18
 2d6:	53 07       	cpc	r21, r19
 2d8:	21 f4       	brne	.+8      	; 0x2e2 <ballLogicSM+0xa6>
			{
				ballLogicSM_state = ball_upleft;
 2da:	84 e0       	ldi	r24, 0x04	; 4
 2dc:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 2e0:	fa c0       	rjmp	.+500    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
			}else if (paddle2POS == yPOS>>1)
 2e2:	86 95       	lsr	r24
 2e4:	98 13       	cpse	r25, r24
 2e6:	c9 c0       	rjmp	.+402    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
			{
				ballLogicSM_state = ball_downleft;
 2e8:	85 e0       	ldi	r24, 0x05	; 5
 2ea:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 2ee:	e7 c0       	rjmp	.+462    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
			
		}
		break;
		
		case ball_upright:
		if (yPOS<128 && xPOS>1 )
 2f0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <yPOS>
 2f4:	88 23       	and	r24, r24
 2f6:	2c f0       	brlt	.+10     	; 0x302 <ballLogicSM+0xc6>
 2f8:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <xPOS>
 2fc:	92 30       	cpi	r25, 0x02	; 2
 2fe:	08 f0       	brcs	.+2      	; 0x302 <ballLogicSM+0xc6>
 300:	c6 c0       	rjmp	.+396    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
		{
			ballLogicSM_state = ball_upright;
		} else {
			if (xPOS!=6)
 302:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <xPOS>
 306:	96 30       	cpi	r25, 0x06	; 6
 308:	21 f0       	breq	.+8      	; 0x312 <ballLogicSM+0xd6>
			{
				ballLogicSM_state = ball_downright;
 30a:	87 e0       	ldi	r24, 0x07	; 7
 30c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 310:	ca c0       	rjmp	.+404    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
			}else if (paddle2POS==yPOS>>2) // top hit
 312:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <paddle2POS>
 316:	28 2f       	mov	r18, r24
 318:	26 95       	lsr	r18
 31a:	26 95       	lsr	r18
 31c:	29 13       	cpse	r18, r25
 31e:	04 c0       	rjmp	.+8      	; 0x328 <ballLogicSM+0xec>
				{
					ballLogicSM_state = ball_downleft;
 320:	85 e0       	ldi	r24, 0x05	; 5
 322:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 326:	cb c0       	rjmp	.+406    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
				}else if (paddle2POS==yPOS>>1) // middle hit
 328:	28 2f       	mov	r18, r24
 32a:	26 95       	lsr	r18
 32c:	92 13       	cpse	r25, r18
 32e:	04 c0       	rjmp	.+8      	; 0x338 <ballLogicSM+0xfc>
				{
					ballLogicSM_state = ball_downleft;
 330:	85 e0       	ldi	r24, 0x05	; 5
 332:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 336:	c3 c0       	rjmp	.+390    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
				}else if (paddle2POS==yPOS) // bottom hit
 338:	89 13       	cpse	r24, r25
 33a:	a9 c0       	rjmp	.+338    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
				{
					ballLogicSM_state = ball_upleft;
 33c:	84 e0       	ldi	r24, 0x04	; 4
 33e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 342:	c9 c0       	rjmp	.+402    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
			
		}
		break;
		
		case ball_downright:
		if (yPOS>1 && xPOS<6)
 344:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <yPOS>
 348:	82 30       	cpi	r24, 0x02	; 2
 34a:	28 f0       	brcs	.+10     	; 0x356 <ballLogicSM+0x11a>
 34c:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <xPOS>
 350:	96 30       	cpi	r25, 0x06	; 6
 352:	08 f4       	brcc	.+2      	; 0x356 <ballLogicSM+0x11a>
 354:	a8 c0       	rjmp	.+336    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
		{
			ballLogicSM_state = ball_downright;
			} else {
				if (xPOS!=6)
 356:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <xPOS>
 35a:	96 30       	cpi	r25, 0x06	; 6
 35c:	21 f0       	breq	.+8      	; 0x366 <ballLogicSM+0x12a>
				{
					ballLogicSM_state = ball_upright;
 35e:	86 e0       	ldi	r24, 0x06	; 6
 360:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 364:	94 c0       	rjmp	.+296    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
				}else if (paddle2POS==yPOS>>2) // top hit
 366:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <paddle2POS>
 36a:	28 2f       	mov	r18, r24
 36c:	26 95       	lsr	r18
 36e:	26 95       	lsr	r18
 370:	29 13       	cpse	r18, r25
 372:	04 c0       	rjmp	.+8      	; 0x37c <ballLogicSM+0x140>
				{
					ballLogicSM_state = ball_downleft;
 374:	85 e0       	ldi	r24, 0x05	; 5
 376:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 37a:	a1 c0       	rjmp	.+322    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
				}else if (paddle2POS==yPOS>>1) // bottom hit
 37c:	86 95       	lsr	r24
 37e:	98 13       	cpse	r25, r24
 380:	92 c0       	rjmp	.+292    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
				{
					ballLogicSM_state = ball_upleft;
 382:	84 e0       	ldi	r24, 0x04	; 4
 384:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 388:	a6 c0       	rjmp	.+332    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
				}
			
		}
		break;
		case  ball_downleft:
		if (yPOS>1 && xPOS>1)
 38a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <yPOS>
 38e:	82 30       	cpi	r24, 0x02	; 2
 390:	28 f0       	brcs	.+10     	; 0x39c <ballLogicSM+0x160>
 392:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <xPOS>
 396:	92 30       	cpi	r25, 0x02	; 2
 398:	08 f0       	brcs	.+2      	; 0x39c <ballLogicSM+0x160>
 39a:	91 c0       	rjmp	.+290    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
		{
			ballLogicSM_state = ball_downleft;
			
		}else 
		{
			if(xPOS!=1){
 39c:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <xPOS>
 3a0:	91 30       	cpi	r25, 0x01	; 1
 3a2:	21 f0       	breq	.+8      	; 0x3ac <ballLogicSM+0x170>
				ballLogicSM_state = ball_upleft;
 3a4:	84 e0       	ldi	r24, 0x04	; 4
 3a6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 3aa:	95 c0       	rjmp	.+298    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
			} else if (paddle1POS==yPOS>>2) // top hit
 3ac:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <paddle1POS>
 3b0:	28 2f       	mov	r18, r24
 3b2:	26 95       	lsr	r18
 3b4:	26 95       	lsr	r18
 3b6:	29 13       	cpse	r18, r25
 3b8:	04 c0       	rjmp	.+8      	; 0x3c2 <ballLogicSM+0x186>
			{
				ballLogicSM_state = ball_upright;
 3ba:	86 e0       	ldi	r24, 0x06	; 6
 3bc:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 3c0:	66 c0       	rjmp	.+204    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
			}else if (paddle1POS==yPOS>>1) // middle hit
 3c2:	28 2f       	mov	r18, r24
 3c4:	26 95       	lsr	r18
 3c6:	92 13       	cpse	r25, r18
 3c8:	04 c0       	rjmp	.+8      	; 0x3d2 <ballLogicSM+0x196>
			{
				ballLogicSM_state = ball_downright;
 3ca:	87 e0       	ldi	r24, 0x07	; 7
 3cc:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 3d0:	6a c0       	rjmp	.+212    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
			}else if (paddle1POS==yPOS) // bottom hit
 3d2:	89 13       	cpse	r24, r25
 3d4:	74 c0       	rjmp	.+232    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
			{
				ballLogicSM_state = ball_upright;
 3d6:	86 e0       	ldi	r24, 0x06	; 6
 3d8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 3dc:	58 c0       	rjmp	.+176    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
			
		}
		break;
		
		case ball_upleft:
		if (yPOS<128 && xPOS>1)
 3de:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <yPOS>
 3e2:	88 23       	and	r24, r24
 3e4:	2c f0       	brlt	.+10     	; 0x3f0 <ballLogicSM+0x1b4>
 3e6:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <xPOS>
 3ea:	92 30       	cpi	r25, 0x02	; 2
 3ec:	08 f0       	brcs	.+2      	; 0x3f0 <ballLogicSM+0x1b4>
 3ee:	73 c0       	rjmp	.+230    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
		{
			ballLogicSM_state = ball_upleft;
		}else {
			if (xPOS!=1)
 3f0:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <xPOS>
 3f4:	91 30       	cpi	r25, 0x01	; 1
 3f6:	21 f0       	breq	.+8      	; 0x400 <__LOCK_REGION_LENGTH__>
			{
				ballLogicSM_state = ball_downleft;
 3f8:	85 e0       	ldi	r24, 0x05	; 5
 3fa:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 3fe:	5f c0       	rjmp	.+190    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
			}else if (paddle1POS==yPOS<<2) // bottom hit
 400:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <paddle1POS>
 404:	49 2f       	mov	r20, r25
 406:	50 e0       	ldi	r21, 0x00	; 0
 408:	28 2f       	mov	r18, r24
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	b9 01       	movw	r22, r18
 40e:	66 0f       	add	r22, r22
 410:	77 1f       	adc	r23, r23
 412:	66 0f       	add	r22, r22
 414:	77 1f       	adc	r23, r23
 416:	46 17       	cp	r20, r22
 418:	57 07       	cpc	r21, r23
 41a:	21 f4       	brne	.+8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
				{
					ballLogicSM_state = ball_upright;
 41c:	86 e0       	ldi	r24, 0x06	; 6
 41e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 422:	35 c0       	rjmp	.+106    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
				}else if (paddle1POS==yPOS<<1) // middle hit
 424:	22 0f       	add	r18, r18
 426:	33 1f       	adc	r19, r19
 428:	42 17       	cp	r20, r18
 42a:	53 07       	cpc	r21, r19
 42c:	21 f4       	brne	.+8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
				{
					ballLogicSM_state = ball_downright;
 42e:	87 e0       	ldi	r24, 0x07	; 7
 430:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 434:	38 c0       	rjmp	.+112    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
				}else if (paddle1POS==yPOS) // top hit
 436:	89 13       	cpse	r24, r25
 438:	4e c0       	rjmp	.+156    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
				{
					ballLogicSM_state = ball_upright;
 43a:	86 e0       	ldi	r24, 0x06	; 6
 43c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ballLogicSM_state>
 440:	26 c0       	rjmp	.+76     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
			
		}
		break;
	}
	
	switch (ballLogicSM_state){
 442:	8e 2f       	mov	r24, r30
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	88 30       	cpi	r24, 0x08	; 8
 448:	91 05       	cpc	r25, r1
 44a:	08 f0       	brcs	.+2      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 44c:	4f c0       	rjmp	.+158    	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 44e:	fc 01       	movw	r30, r24
 450:	e2 5b       	subi	r30, 0xB2	; 178
 452:	ff 4f       	sbci	r31, 0xFF	; 255
 454:	a2 c1       	rjmp	.+836    	; 0x79a <__tablejump2__>
		case ball_init:
		xPOS = 3;
 456:	83 e0       	ldi	r24, 0x03	; 3
 458:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <xPOS>
		yPOS = 16;
 45c:	80 e1       	ldi	r24, 0x10	; 16
 45e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <yPOS>
		ballPOS_update();
 462:	b3 ce       	rjmp	.-666    	; 0x1ca <ballPOS_update>
		break;
 464:	08 95       	ret
		case  ball_wait:
		break;
		case ball_left:
		xPOS --;
 466:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xPOS>
 46a:	81 50       	subi	r24, 0x01	; 1
 46c:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <xPOS>
		yPOS = 16;
 470:	80 e1       	ldi	r24, 0x10	; 16
 472:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <yPOS>
		ballPOS_update();
 476:	a9 ce       	rjmp	.-686    	; 0x1ca <ballPOS_update>
		break;
 478:	08 95       	ret
		case ball_right:
		xPOS ++;
 47a:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xPOS>
 47e:	8f 5f       	subi	r24, 0xFF	; 255
 480:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <xPOS>
		yPOS = 16;
 484:	80 e1       	ldi	r24, 0x10	; 16
 486:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <yPOS>
		ballPOS_update();
 48a:	9f ce       	rjmp	.-706    	; 0x1ca <ballPOS_update>
		break;
 48c:	08 95       	ret
		case ball_upright:
		xPOS ++;
 48e:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xPOS>
 492:	8f 5f       	subi	r24, 0xFF	; 255
 494:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <xPOS>
		yPOS =yPOS*2;
 498:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <yPOS>
 49c:	88 0f       	add	r24, r24
 49e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <yPOS>
		ballPOS_update();
 4a2:	93 ce       	rjmp	.-730    	; 0x1ca <ballPOS_update>
		break;
 4a4:	08 95       	ret
		case ball_downright:
		xPOS ++;
 4a6:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xPOS>
 4aa:	8f 5f       	subi	r24, 0xFF	; 255
 4ac:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <xPOS>
		yPOS =yPOS/2;
 4b0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <yPOS>
 4b4:	86 95       	lsr	r24
 4b6:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <yPOS>
		ballPOS_update();
 4ba:	87 ce       	rjmp	.-754    	; 0x1ca <ballPOS_update>
		break;
 4bc:	08 95       	ret
		case ball_downleft:
		xPOS --;
 4be:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xPOS>
 4c2:	81 50       	subi	r24, 0x01	; 1
 4c4:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <xPOS>
		yPOS =yPOS/2;
 4c8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <yPOS>
 4cc:	86 95       	lsr	r24
 4ce:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <yPOS>
		ballPOS_update();
 4d2:	7b ce       	rjmp	.-778    	; 0x1ca <ballPOS_update>
		break;
 4d4:	08 95       	ret
		case ball_upleft:
		xPOS --;
 4d6:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xPOS>
 4da:	81 50       	subi	r24, 0x01	; 1
 4dc:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <xPOS>
		yPOS =yPOS*2;
 4e0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <yPOS>
 4e4:	88 0f       	add	r24, r24
 4e6:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <yPOS>
		ballPOS_update();
 4ea:	6f ce       	rjmp	.-802    	; 0x1ca <ballPOS_update>
 4ec:	08 95       	ret

000004ee <ioSetup>:
	*/
	
}

void ioSetup() {
	 DDRB |= (1<<DDB0) | (1<<DDB1) | (1<<DDB2); //PORTB as output
 4ee:	84 b1       	in	r24, 0x04	; 4
 4f0:	87 60       	ori	r24, 0x07	; 7
 4f2:	84 b9       	out	0x04, r24	; 4
	
	 DDRA |= (1<<DDA0) | (1<<DDA1) | (1<<DDA2) | (1<<DDA3) | (1<<DDA4); //PORTA as input
 4f4:	81 b1       	in	r24, 0x01	; 1
 4f6:	8f 61       	ori	r24, 0x1F	; 31
 4f8:	81 b9       	out	0x01, r24	; 1
 4fa:	08 95       	ret

000004fc <paddle1SM>:
	
}
void paddle1SM(){
	switch (paddle1SM_state){
 4fc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <paddle1SM_state>
 500:	82 30       	cpi	r24, 0x02	; 2
 502:	59 f1       	breq	.+86     	; 0x55a <paddle1SM+0x5e>
 504:	28 f4       	brcc	.+10     	; 0x510 <paddle1SM+0x14>
 506:	88 23       	and	r24, r24
 508:	41 f0       	breq	.+16     	; 0x51a <paddle1SM+0x1e>
 50a:	81 30       	cpi	r24, 0x01	; 1
 50c:	d1 f0       	breq	.+52     	; 0x542 <paddle1SM+0x46>
 50e:	37 c0       	rjmp	.+110    	; 0x57e <paddle1SM+0x82>
 510:	83 30       	cpi	r24, 0x03	; 3
 512:	31 f1       	breq	.+76     	; 0x560 <paddle1SM+0x64>
 514:	84 30       	cpi	r24, 0x04	; 4
 516:	81 f1       	breq	.+96     	; 0x578 <paddle1SM+0x7c>
 518:	32 c0       	rjmp	.+100    	; 0x57e <paddle1SM+0x82>
		case paddle1SM_wait:
		if (!up1 && !down1)
 51a:	00 99       	sbic	0x00, 0	; 0
 51c:	02 c0       	rjmp	.+4      	; 0x522 <paddle1SM+0x26>
 51e:	01 9b       	sbis	0x00, 1	; 0
 520:	4c c0       	rjmp	.+152    	; 0x5ba <paddle1SM+0xbe>
		{
			paddle1SM_state = paddle1SM_wait;
		}else if (up1 && !down1)
 522:	00 9b       	sbis	0x00, 0	; 0
 524:	06 c0       	rjmp	.+12     	; 0x532 <paddle1SM+0x36>
 526:	01 99       	sbic	0x00, 1	; 0
 528:	04 c0       	rjmp	.+8      	; 0x532 <paddle1SM+0x36>
		{
			paddle1SM_state = up1_press;
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <paddle1SM_state>
 530:	08 95       	ret
		
		}else if (down1 && !up1)
 532:	01 9b       	sbis	0x00, 1	; 0
 534:	42 c0       	rjmp	.+132    	; 0x5ba <paddle1SM+0xbe>
 536:	00 99       	sbic	0x00, 0	; 0
 538:	40 c0       	rjmp	.+128    	; 0x5ba <paddle1SM+0xbe>
		{
			paddle1SM_state = down1_press;
 53a:	83 e0       	ldi	r24, 0x03	; 3
 53c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <paddle1SM_state>
 540:	08 95       	ret
		}
		break;
		
		case  up1_press:
		if (up1 && !down1)
 542:	00 9b       	sbis	0x00, 0	; 0
 544:	02 c0       	rjmp	.+4      	; 0x54a <paddle1SM+0x4e>
 546:	01 9b       	sbis	0x00, 1	; 0
 548:	38 c0       	rjmp	.+112    	; 0x5ba <paddle1SM+0xbe>
		{
			paddle1SM_state = up1_press;
		}else if (!up1 && !down1)
 54a:	00 99       	sbic	0x00, 0	; 0
 54c:	36 c0       	rjmp	.+108    	; 0x5ba <paddle1SM+0xbe>
 54e:	01 99       	sbic	0x00, 1	; 0
 550:	34 c0       	rjmp	.+104    	; 0x5ba <paddle1SM+0xbe>
		{
			paddle1SM_state = up1_release;
 552:	82 e0       	ldi	r24, 0x02	; 2
 554:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <paddle1SM_state>
 558:	17 c0       	rjmp	.+46     	; 0x588 <paddle1SM+0x8c>
		}
		break;
		
		case up1_release:
			paddle1SM_state = paddle1SM_wait;
 55a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <paddle1SM_state>
			break;
 55e:	08 95       	ret
		
		case down1_press:
		if (down1 && !up1)
 560:	01 9b       	sbis	0x00, 1	; 0
 562:	02 c0       	rjmp	.+4      	; 0x568 <paddle1SM+0x6c>
 564:	00 9b       	sbis	0x00, 0	; 0
 566:	29 c0       	rjmp	.+82     	; 0x5ba <paddle1SM+0xbe>
		{
			paddle1SM_state = down1_press;
		}else if (!down1 && !up1)
 568:	01 99       	sbic	0x00, 1	; 0
 56a:	27 c0       	rjmp	.+78     	; 0x5ba <paddle1SM+0xbe>
 56c:	00 99       	sbic	0x00, 0	; 0
 56e:	25 c0       	rjmp	.+74     	; 0x5ba <paddle1SM+0xbe>
		{
			paddle1SM_state = down1_release;
 570:	84 e0       	ldi	r24, 0x04	; 4
 572:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <paddle1SM_state>
 576:	15 c0       	rjmp	.+42     	; 0x5a2 <paddle1SM+0xa6>
		}
		break;
		
		case  down1_release:
		paddle1SM_state = paddle1SM_wait;
 578:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <paddle1SM_state>
		break;
 57c:	08 95       	ret
		
		
	}
switch (paddle1SM_state){ //actions
 57e:	82 30       	cpi	r24, 0x02	; 2
 580:	19 f0       	breq	.+6      	; 0x588 <paddle1SM+0x8c>
 582:	84 30       	cpi	r24, 0x04	; 4
 584:	71 f0       	breq	.+28     	; 0x5a2 <paddle1SM+0xa6>
 586:	08 95       	ret
		
		case  up1_press:
		break;
	
		case up1_release://upshift
		if (pattern[0]!=224){
 588:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 58c:	80 3e       	cpi	r24, 0xE0	; 224
 58e:	a9 f0       	breq	.+42     	; 0x5ba <paddle1SM+0xbe>
			pattern[0]=pattern[0]<<1;
 590:	88 0f       	add	r24, r24
 592:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			paddle1POS=paddle1POS<<1;
 596:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <paddle1POS>
 59a:	88 0f       	add	r24, r24
 59c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <paddle1POS>
 5a0:	08 95       	ret
	
		case down1_press:
		break;
	
		case  down1_release://downshift
		if (pattern[0]>7){
 5a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 5a6:	88 30       	cpi	r24, 0x08	; 8
 5a8:	40 f0       	brcs	.+16     	; 0x5ba <paddle1SM+0xbe>
			pattern[0]=pattern[0]>>1;
 5aa:	86 95       	lsr	r24
 5ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			paddle1POS=paddle1POS>>1;
 5b0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <paddle1POS>
 5b4:	86 95       	lsr	r24
 5b6:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <paddle1POS>
 5ba:	08 95       	ret

000005bc <paddle2SM>:
	
	}
}

void paddle2SM(){
	switch (paddle2SM_state){
 5bc:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <paddle2SM_state>
 5c0:	82 30       	cpi	r24, 0x02	; 2
 5c2:	59 f1       	breq	.+86     	; 0x61a <paddle2SM+0x5e>
 5c4:	28 f4       	brcc	.+10     	; 0x5d0 <paddle2SM+0x14>
 5c6:	88 23       	and	r24, r24
 5c8:	41 f0       	breq	.+16     	; 0x5da <paddle2SM+0x1e>
 5ca:	81 30       	cpi	r24, 0x01	; 1
 5cc:	d1 f0       	breq	.+52     	; 0x602 <paddle2SM+0x46>
 5ce:	37 c0       	rjmp	.+110    	; 0x63e <paddle2SM+0x82>
 5d0:	83 30       	cpi	r24, 0x03	; 3
 5d2:	31 f1       	breq	.+76     	; 0x620 <paddle2SM+0x64>
 5d4:	84 30       	cpi	r24, 0x04	; 4
 5d6:	81 f1       	breq	.+96     	; 0x638 <paddle2SM+0x7c>
 5d8:	32 c0       	rjmp	.+100    	; 0x63e <paddle2SM+0x82>
		case paddle2SM_wait:
		if (!up2 && !down2)
 5da:	02 99       	sbic	0x00, 2	; 0
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <paddle2SM+0x26>
 5de:	03 9b       	sbis	0x00, 3	; 0
 5e0:	4c c0       	rjmp	.+152    	; 0x67a <paddle2SM+0xbe>
		{
			paddle2SM_state = paddle2SM_wait;
		}else if (up2 && !down2)
 5e2:	02 9b       	sbis	0x00, 2	; 0
 5e4:	06 c0       	rjmp	.+12     	; 0x5f2 <paddle2SM+0x36>
 5e6:	03 99       	sbic	0x00, 3	; 0
 5e8:	04 c0       	rjmp	.+8      	; 0x5f2 <paddle2SM+0x36>
		{
			paddle2SM_state = up2_press;
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <paddle2SM_state>
 5f0:	08 95       	ret
			
		}else if (down2 && !up2)
 5f2:	03 9b       	sbis	0x00, 3	; 0
 5f4:	42 c0       	rjmp	.+132    	; 0x67a <paddle2SM+0xbe>
 5f6:	02 99       	sbic	0x00, 2	; 0
 5f8:	40 c0       	rjmp	.+128    	; 0x67a <paddle2SM+0xbe>
		{
			paddle2SM_state = down2_press;
 5fa:	83 e0       	ldi	r24, 0x03	; 3
 5fc:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <paddle2SM_state>
 600:	08 95       	ret
		}
		break;
		
		case  up2_press:
		if (up2 && !down2)
 602:	02 9b       	sbis	0x00, 2	; 0
 604:	02 c0       	rjmp	.+4      	; 0x60a <paddle2SM+0x4e>
 606:	03 9b       	sbis	0x00, 3	; 0
 608:	38 c0       	rjmp	.+112    	; 0x67a <paddle2SM+0xbe>
		{
			paddle2SM_state = up2_press;
		}else if (!up2 && !down2)
 60a:	02 99       	sbic	0x00, 2	; 0
 60c:	36 c0       	rjmp	.+108    	; 0x67a <paddle2SM+0xbe>
 60e:	03 99       	sbic	0x00, 3	; 0
 610:	34 c0       	rjmp	.+104    	; 0x67a <paddle2SM+0xbe>
		{
			paddle2SM_state = up2_release;
 612:	82 e0       	ldi	r24, 0x02	; 2
 614:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <paddle2SM_state>
 618:	17 c0       	rjmp	.+46     	; 0x648 <paddle2SM+0x8c>
		}
		break;
		
		case up2_release:
		paddle2SM_state = paddle2SM_wait;
 61a:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <paddle2SM_state>
		break;
 61e:	08 95       	ret
		
		case down2_press:
		if (down2 && !up2)
 620:	03 9b       	sbis	0x00, 3	; 0
 622:	02 c0       	rjmp	.+4      	; 0x628 <paddle2SM+0x6c>
 624:	02 9b       	sbis	0x00, 2	; 0
 626:	29 c0       	rjmp	.+82     	; 0x67a <paddle2SM+0xbe>
		{
			paddle2SM_state = down2_press;
		}else if (!down2 && !up2)
 628:	03 99       	sbic	0x00, 3	; 0
 62a:	27 c0       	rjmp	.+78     	; 0x67a <paddle2SM+0xbe>
 62c:	02 99       	sbic	0x00, 2	; 0
 62e:	25 c0       	rjmp	.+74     	; 0x67a <paddle2SM+0xbe>
		{
			paddle2SM_state = down2_release;
 630:	84 e0       	ldi	r24, 0x04	; 4
 632:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <paddle2SM_state>
 636:	15 c0       	rjmp	.+42     	; 0x662 <paddle2SM+0xa6>
		}
		break;
		
		case  down2_release:
		paddle2SM_state = paddle2SM_wait;
 638:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <paddle2SM_state>
		break;
 63c:	08 95       	ret
		
		
	}
	switch (paddle2SM_state){ //actions
 63e:	82 30       	cpi	r24, 0x02	; 2
 640:	19 f0       	breq	.+6      	; 0x648 <paddle2SM+0x8c>
 642:	84 30       	cpi	r24, 0x04	; 4
 644:	71 f0       	breq	.+28     	; 0x662 <paddle2SM+0xa6>
 646:	08 95       	ret
		
		case  up2_press:
		break;
		
		case up2_release://upshift
		if (pattern[7]!=224){
 648:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
 64c:	80 3e       	cpi	r24, 0xE0	; 224
 64e:	a9 f0       	breq	.+42     	; 0x67a <paddle2SM+0xbe>
			pattern[7]=pattern[7]<<1;
 650:	88 0f       	add	r24, r24
 652:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__data_start+0x7>
			paddle2POS=paddle2POS<<1;
 656:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <paddle2POS>
 65a:	88 0f       	add	r24, r24
 65c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <paddle2POS>
 660:	08 95       	ret
		
		case down2_press:
		break;
		
		case  down2_release://downshift
		if (pattern[7]!=7){
 662:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
 666:	87 30       	cpi	r24, 0x07	; 7
 668:	41 f0       	breq	.+16     	; 0x67a <paddle2SM+0xbe>
			pattern[7]=pattern[7]>>1;
 66a:	86 95       	lsr	r24
 66c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__data_start+0x7>
			paddle2POS=paddle2POS>>1;
 670:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <paddle2POS>
 674:	86 95       	lsr	r24
 676:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <paddle2POS>
 67a:	08 95       	ret

0000067c <store_SM>:
	}
	return 0;
}

void store_SM() {
	switch (store_state){
 67c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <store_state>
 680:	81 30       	cpi	r24, 0x01	; 1
 682:	41 f0       	breq	.+16     	; 0x694 <store_SM+0x18>
 684:	18 f0       	brcs	.+6      	; 0x68c <store_SM+0x10>
 686:	82 30       	cpi	r24, 0x02	; 2
 688:	49 f0       	breq	.+18     	; 0x69c <store_SM+0x20>
 68a:	0c c0       	rjmp	.+24     	; 0x6a4 <store_SM+0x28>
		case store_init:
		store_state = store_high;
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <store_state>
		break;
 692:	0d c0       	rjmp	.+26     	; 0x6ae <store_SM+0x32>
		case store_high:
		store_state = store_low;
 694:	82 e0       	ldi	r24, 0x02	; 2
 696:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <store_state>
 69a:	0b c0       	rjmp	.+22     	; 0x6b2 <store_SM+0x36>
		break;
		case  store_low:
		store_state = store_high;
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <store_state>
		break;
 6a2:	05 c0       	rjmp	.+10     	; 0x6ae <store_SM+0x32>
		
	}
	switch (store_state){
 6a4:	81 30       	cpi	r24, 0x01	; 1
 6a6:	19 f0       	breq	.+6      	; 0x6ae <store_SM+0x32>
 6a8:	82 30       	cpi	r24, 0x02	; 2
 6aa:	21 f4       	brne	.+8      	; 0x6b4 <store_SM+0x38>
 6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <store_SM+0x36>
		case  store_init:
		break;
		case store_high:
		STORE_HIGH();
 6ae:	29 9a       	sbi	0x05, 1	; 5
		break;
 6b0:	08 95       	ret
		case  store_low:
		STORE_LOW();
 6b2:	29 98       	cbi	0x05, 1	; 5
 6b4:	08 95       	ret

000006b6 <shiftOut>:
	
//	_delay_ms(1);
}
 
void shiftOut(uint8_t val)
{
 6b6:	20 e0       	ldi	r18, 0x00	; 0
 6b8:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		//if (bitOrder == LSBFIRST)
		//digitalWrite(dataPin, !!(val & (1 << i)));
		 if(!!(val & (1 << i))){
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	ac 01       	movw	r20, r24
 6be:	02 2e       	mov	r0, r18
 6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <shiftOut+0x10>
 6c2:	55 95       	asr	r21
 6c4:	47 95       	ror	r20
 6c6:	0a 94       	dec	r0
 6c8:	e2 f7       	brpl	.-8      	; 0x6c2 <shiftOut+0xc>
 6ca:	40 ff       	sbrs	r20, 0
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <shiftOut+0x1c>
			 DATA_HIGH();
 6ce:	28 9a       	sbi	0x05, 0	; 5
 6d0:	01 c0       	rjmp	.+2      	; 0x6d4 <shiftOut+0x1e>
			 }else{
			 DATA_LOW();
 6d2:	28 98       	cbi	0x05, 0	; 5
		 }
		//else
		//digitalWrite(dataPin, !!(val & (1 << (7 - i))));
		
		//digitalWrite(clockPin, HIGH);
		SHIFT_HIGH();
 6d4:	2a 9a       	sbi	0x05, 2	; 5
		//digitalWrite(clockPin, LOW);
		SHIFT_LOW();
 6d6:	2a 98       	cbi	0x05, 2	; 5
 6d8:	2f 5f       	subi	r18, 0xFF	; 255
 6da:	3f 4f       	sbci	r19, 0xFF	; 255
 
void shiftOut(uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
 6dc:	28 30       	cpi	r18, 0x08	; 8
 6de:	31 05       	cpc	r19, r1
 6e0:	69 f7       	brne	.-38     	; 0x6bc <shiftOut+0x6>
		//digitalWrite(clockPin, HIGH);
		SHIFT_HIGH();
		//digitalWrite(clockPin, LOW);
		SHIFT_LOW();
	}
 6e2:	08 95       	ret

000006e4 <main>:
		
	}
}

int main() {
	ioSetup();
 6e4:	04 df       	rcall	.-504    	; 0x4ee <ioSetup>
	
	const unsigned long timerPeriod = 1;
	TimerSet(timerPeriod); TimerOn();
 6e6:	61 e0       	ldi	r22, 0x01	; 1
 6e8:	70 e0       	ldi	r23, 0x00	; 0
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	5c dd       	rcall	.-1352   	; 0x1a8 <TimerSet>
 6f0:	fb dc       	rcall	.-1546   	; 0xe8 <TimerOn>
	store_state = store_init;
 6f2:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <store_state>
	paddle1SM_state = paddle1SM_wait;
 6f6:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <paddle1SM_state>
	paddle2SM_state = paddle2SM_wait;
 6fa:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <paddle2SM_state>
	ballLogicSM_state = ball_init;
 6fe:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <ballLogicSM_state>
	paddle1POS=16;
 702:	80 e1       	ldi	r24, 0x10	; 16
 704:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <paddle1POS>
	paddle2POS=16;
 708:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <paddle2POS>
	xPOS = 3;
 70c:	93 e0       	ldi	r25, 0x03	; 3
 70e:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <xPOS>
	yPOS = 16;
 712:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <yPOS>
	ballPOS_update();
 716:	59 dd       	rcall	.-1358   	; 0x1ca <ballPOS_update>
		paddle2SM();
		
		for (int i=0; i<8; i++) {
			
			shiftOut( ~pattern[i]);
			shiftOut( 128 >> i);
 718:	68 94       	set
 71a:	ee 24       	eor	r14, r14
 71c:	e7 f8       	bld	r14, 7
 71e:	f1 2c       	mov	r15, r1
			while(store_SM_elapsedTime>=1){
				store_SM();
				store_SM();
				store_SM_elapsedTime=0;
			}
			store_SM_elapsedTime += timerPeriod;
 720:	bb 24       	eor	r11, r11
		}
		
		while (ballLogicSM_elapsedTime>=300){
 722:	b3 94       	inc	r11
	ballPOS_update();
	//unsigned char i;
	//pattern[3]=0b00010000;
	
	while (1){
		softRest();
 724:	c1 2c       	mov	r12, r1
 726:	d1 2c       	mov	r13, r1
		paddle1SM();
 728:	70 dd       	rcall	.-1312   	; 0x20a <softRest>
 72a:	e8 de       	rcall	.-560    	; 0x4fc <paddle1SM>
		paddle2SM();
 72c:	47 df       	rcall	.-370    	; 0x5bc <paddle2SM>
 72e:	00 e0       	ldi	r16, 0x00	; 0
 730:	11 e0       	ldi	r17, 0x01	; 1
		
		for (int i=0; i<8; i++) {
 732:	c0 e0       	ldi	r28, 0x00	; 0
 734:	d0 e0       	ldi	r29, 0x00	; 0
			
			shiftOut( ~pattern[i]);
 736:	f8 01       	movw	r30, r16
 738:	81 91       	ld	r24, Z+
 73a:	8f 01       	movw	r16, r30
 73c:	80 95       	com	r24
 73e:	bb df       	rcall	.-138    	; 0x6b6 <shiftOut>
			shiftOut( 128 >> i);
 740:	c7 01       	movw	r24, r14
 742:	0c 2e       	mov	r0, r28
 744:	02 c0       	rjmp	.+4      	; 0x74a <main+0x66>
 746:	95 95       	asr	r25
 748:	87 95       	ror	r24
 74a:	0a 94       	dec	r0
 74c:	e2 f7       	brpl	.-8      	; 0x746 <main+0x62>
 74e:	b3 df       	rcall	.-154    	; 0x6b6 <shiftOut>
 750:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <store_SM_elapsedTime>
			while(store_SM_elapsedTime>=1){
 754:	81 11       	cpse	r24, r1
 756:	1e c0       	rjmp	.+60     	; 0x794 <main+0xb0>
 758:	b0 92 14 01 	sts	0x0114, r11	; 0x800114 <store_SM_elapsedTime>
				store_SM();
				store_SM();
				store_SM_elapsedTime=0;
			}
			store_SM_elapsedTime += timerPeriod;
 75c:	21 96       	adiw	r28, 0x01	; 1
	while (1){
		softRest();
		paddle1SM();
		paddle2SM();
		
		for (int i=0; i<8; i++) {
 75e:	c8 30       	cpi	r28, 0x08	; 8
 760:	d1 05       	cpc	r29, r1
 762:	49 f7       	brne	.-46     	; 0x736 <main+0x52>
 764:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <ballLogicSM_elapsedTime>
				store_SM_elapsedTime=0;
			}
			store_SM_elapsedTime += timerPeriod;
		}
		
		while (ballLogicSM_elapsedTime>=300){
 768:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <ballLogicSM_elapsedTime+0x1>
 76c:	8c 32       	cpi	r24, 0x2C	; 44
 76e:	21 e0       	ldi	r18, 0x01	; 1
 770:	92 07       	cpc	r25, r18
 772:	60 f4       	brcc	.+24     	; 0x78c <main+0xa8>
 774:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <TimerFlag>
			//xPOS=3;yPOS=16;
			//ballPOS_update();
			ballLogicSM_elapsedTime = 0;
		}
		
		while(!TimerFlag);
 778:	22 23       	and	r18, r18
 77a:	e1 f3       	breq	.-8      	; 0x774 <main+0x90>
		TimerFlag = 0;
 77c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <TimerFlag>
		ballLogicSM_elapsedTime += timerPeriod;
 780:	01 96       	adiw	r24, 0x01	; 1
 782:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <ballLogicSM_elapsedTime+0x1>
	}
 786:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <ballLogicSM_elapsedTime>
			}
			store_SM_elapsedTime += timerPeriod;
		}
		
		while (ballLogicSM_elapsedTime>=300){
			ballLogicSM();
 78a:	ce cf       	rjmp	.-100    	; 0x728 <main+0x44>
				store_SM_elapsedTime=0;
			}
			store_SM_elapsedTime += timerPeriod;
		}
		
		while (ballLogicSM_elapsedTime>=300){
 78c:	57 dd       	rcall	.-1362   	; 0x23c <ballLogicSM>
 78e:	8c 2d       	mov	r24, r12
 790:	9d 2d       	mov	r25, r13
		for (int i=0; i<8; i++) {
			
			shiftOut( ~pattern[i]);
			shiftOut( 128 >> i);
			while(store_SM_elapsedTime>=1){
				store_SM();
 792:	f0 cf       	rjmp	.-32     	; 0x774 <main+0x90>
 794:	73 df       	rcall	.-282    	; 0x67c <store_SM>
				store_SM();
 796:	72 df       	rcall	.-284    	; 0x67c <store_SM>
 798:	df cf       	rjmp	.-66     	; 0x758 <main+0x74>

0000079a <__tablejump2__>:
 79a:	ee 0f       	add	r30, r30
 79c:	ff 1f       	adc	r31, r31
 79e:	00 24       	eor	r0, r0
 7a0:	00 1c       	adc	r0, r0
 7a2:	0b be       	out	0x3b, r0	; 59
 7a4:	07 90       	elpm	r0, Z+
 7a6:	f6 91       	elpm	r31, Z
 7a8:	e0 2d       	mov	r30, r0
 7aa:	09 94       	ijmp

000007ac <_exit>:
 7ac:	f8 94       	cli

000007ae <__stop_program>:
 7ae:	ff cf       	rjmp	.-2      	; 0x7ae <__stop_program>
