
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000003ec  00000480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080010c  0080010c  0000048c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b7f  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ea  00000000  00000000  000010f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005bc  00000000  00000000  000019dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066f  00000000  00000000  00002090  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000be  00000000  00000000  000026ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000027bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6d c0       	rjmp	.+218    	; 0x110 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ee       	ldi	r30, 0xEC	; 236
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 31       	cpi	r26, 0x16	; 22
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	5a d1       	rcall	.+692    	; 0x378 <main>
  c4:	91 c1       	rjmp	.+802    	; 0x3e8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
			0b00000000,
			0b00000000,
			0b00111000,
			};
			
void ballLogicSM(){
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  e8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_avr_timer_M>
  ec:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_avr_timer_M+0x1>
  f0:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <_avr_timer_M+0x2>
  f4:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <_avr_timer_M+0x3>
  f8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
  fc:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 100:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <__data_end+0x2>
 104:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <__data_end+0x3>
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <__vector_13>:
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
 122:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 126:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 12a:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <__data_end+0x2>
 12e:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <__data_end+0x3>
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	a1 09       	sbc	r26, r1
 136:	b1 09       	sbc	r27, r1
 138:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 13c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 140:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <__data_end+0x2>
 144:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <__data_end+0x3>
 148:	89 2b       	or	r24, r25
 14a:	8a 2b       	or	r24, r26
 14c:	8b 2b       	or	r24, r27
 14e:	99 f4       	brne	.+38     	; 0x176 <__vector_13+0x66>
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <TimerFlag>
 156:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_avr_timer_M>
 15a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_avr_timer_M+0x1>
 15e:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <_avr_timer_M+0x2>
 162:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <_avr_timer_M+0x3>
 166:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 16a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 16e:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <__data_end+0x2>
 172:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <__data_end+0x3>
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <TimerSet>:
 188:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <_avr_timer_M>
 18c:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <_avr_timer_M+0x1>
 190:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_avr_timer_M+0x2>
 194:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_avr_timer_M+0x3>
 198:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <__data_end>
 19c:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <__data_end+0x1>
 1a0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end+0x2>
 1a4:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x3>
 1a8:	08 95       	ret

000001aa <ioSetup>:

	
}

void ioSetup() {
	 DDRB |= (1<<DDB0) | (1<<DDB1) | (1<<DDB2); //PORTB as output
 1aa:	84 b1       	in	r24, 0x04	; 4
 1ac:	87 60       	ori	r24, 0x07	; 7
 1ae:	84 b9       	out	0x04, r24	; 4
	
	 DDRA |= (1<<DDA0) | (1<<DDA1) | (1<<DDA2) | (1<<DDA3); //PORTA as input
 1b0:	81 b1       	in	r24, 0x01	; 1
 1b2:	8f 60       	ori	r24, 0x0F	; 15
 1b4:	81 b9       	out	0x01, r24	; 1
 1b6:	08 95       	ret

000001b8 <paddle1SM>:
	
}
void paddle1SM(){
	switch (paddle1SM_state){
 1b8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <paddle1SM_state>
 1bc:	82 30       	cpi	r24, 0x02	; 2
 1be:	59 f1       	breq	.+86     	; 0x216 <paddle1SM+0x5e>
 1c0:	28 f4       	brcc	.+10     	; 0x1cc <paddle1SM+0x14>
 1c2:	88 23       	and	r24, r24
 1c4:	41 f0       	breq	.+16     	; 0x1d6 <paddle1SM+0x1e>
 1c6:	81 30       	cpi	r24, 0x01	; 1
 1c8:	d1 f0       	breq	.+52     	; 0x1fe <paddle1SM+0x46>
 1ca:	37 c0       	rjmp	.+110    	; 0x23a <paddle1SM+0x82>
 1cc:	83 30       	cpi	r24, 0x03	; 3
 1ce:	31 f1       	breq	.+76     	; 0x21c <paddle1SM+0x64>
 1d0:	84 30       	cpi	r24, 0x04	; 4
 1d2:	81 f1       	breq	.+96     	; 0x234 <paddle1SM+0x7c>
 1d4:	32 c0       	rjmp	.+100    	; 0x23a <paddle1SM+0x82>
		case paddle1SM_wait:
		if (!up1 && !down1)
 1d6:	00 99       	sbic	0x00, 0	; 0
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <paddle1SM+0x26>
 1da:	01 9b       	sbis	0x00, 1	; 0
 1dc:	42 c0       	rjmp	.+132    	; 0x262 <paddle1SM+0xaa>
		{
			paddle1SM_state = paddle1SM_wait;
		}else if (up1 && !down1)
 1de:	00 9b       	sbis	0x00, 0	; 0
 1e0:	06 c0       	rjmp	.+12     	; 0x1ee <paddle1SM+0x36>
 1e2:	01 99       	sbic	0x00, 1	; 0
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <paddle1SM+0x36>
		{
			paddle1SM_state = up1_press;
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <paddle1SM_state>
 1ec:	08 95       	ret
		
		}else if (down1 && !up1)
 1ee:	01 9b       	sbis	0x00, 1	; 0
 1f0:	38 c0       	rjmp	.+112    	; 0x262 <paddle1SM+0xaa>
 1f2:	00 99       	sbic	0x00, 0	; 0
 1f4:	36 c0       	rjmp	.+108    	; 0x262 <paddle1SM+0xaa>
		{
			paddle1SM_state = down1_press;
 1f6:	83 e0       	ldi	r24, 0x03	; 3
 1f8:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <paddle1SM_state>
 1fc:	08 95       	ret
		}
		break;
		
		case  up1_press:
		if (up1 && !down1)
 1fe:	00 9b       	sbis	0x00, 0	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <paddle1SM+0x4e>
 202:	01 9b       	sbis	0x00, 1	; 0
 204:	2e c0       	rjmp	.+92     	; 0x262 <paddle1SM+0xaa>
		{
			paddle1SM_state = up1_press;
		}else if (!up1 && !down1)
 206:	00 99       	sbic	0x00, 0	; 0
 208:	2c c0       	rjmp	.+88     	; 0x262 <paddle1SM+0xaa>
 20a:	01 99       	sbic	0x00, 1	; 0
 20c:	2a c0       	rjmp	.+84     	; 0x262 <paddle1SM+0xaa>
		{
			paddle1SM_state = up1_release;
 20e:	82 e0       	ldi	r24, 0x02	; 2
 210:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <paddle1SM_state>
 214:	17 c0       	rjmp	.+46     	; 0x244 <paddle1SM+0x8c>
		}
		break;
		
		case up1_release:
			paddle1SM_state = paddle1SM_wait;
 216:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <paddle1SM_state>
			break;
 21a:	08 95       	ret
		
		case down1_press:
		if (down1 && !up1)
 21c:	01 9b       	sbis	0x00, 1	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <paddle1SM+0x6c>
 220:	00 9b       	sbis	0x00, 0	; 0
 222:	1f c0       	rjmp	.+62     	; 0x262 <paddle1SM+0xaa>
		{
			paddle1SM_state = down1_press;
		}else if (!down1 && !up1)
 224:	01 99       	sbic	0x00, 1	; 0
 226:	1d c0       	rjmp	.+58     	; 0x262 <paddle1SM+0xaa>
 228:	00 99       	sbic	0x00, 0	; 0
 22a:	1b c0       	rjmp	.+54     	; 0x262 <paddle1SM+0xaa>
		{
			paddle1SM_state = down1_release;
 22c:	84 e0       	ldi	r24, 0x04	; 4
 22e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <paddle1SM_state>
 232:	10 c0       	rjmp	.+32     	; 0x254 <paddle1SM+0x9c>
		}
		break;
		
		case  down1_release:
		paddle1SM_state = paddle1SM_wait;
 234:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <paddle1SM_state>
		break;
 238:	08 95       	ret
		
		
	}
switch (paddle1SM_state){ //actions
 23a:	82 30       	cpi	r24, 0x02	; 2
 23c:	19 f0       	breq	.+6      	; 0x244 <paddle1SM+0x8c>
 23e:	84 30       	cpi	r24, 0x04	; 4
 240:	49 f0       	breq	.+18     	; 0x254 <paddle1SM+0x9c>
 242:	08 95       	ret
	
		case  up1_press:
		break;
	
		case up1_release://upshift
		if (pattern[0]!=224){
 244:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 248:	80 3e       	cpi	r24, 0xE0	; 224
 24a:	59 f0       	breq	.+22     	; 0x262 <paddle1SM+0xaa>
			pattern[0]=pattern[0]<<1;
 24c:	88 0f       	add	r24, r24
 24e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 252:	08 95       	ret
	
		case down1_press:
		break;
	
		case  down1_release://downshift
		if (pattern[0]>7){
 254:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 258:	88 30       	cpi	r24, 0x08	; 8
 25a:	18 f0       	brcs	.+6      	; 0x262 <paddle1SM+0xaa>
			pattern[0]=pattern[0]>>1;
 25c:	86 95       	lsr	r24
 25e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 262:	08 95       	ret

00000264 <paddle2SM>:
	
	}
}

void paddle2SM(){
	switch (paddle2SM_state){
 264:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <paddle2SM_state>
 268:	82 30       	cpi	r24, 0x02	; 2
 26a:	59 f1       	breq	.+86     	; 0x2c2 <paddle2SM+0x5e>
 26c:	28 f4       	brcc	.+10     	; 0x278 <paddle2SM+0x14>
 26e:	88 23       	and	r24, r24
 270:	41 f0       	breq	.+16     	; 0x282 <paddle2SM+0x1e>
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	d1 f0       	breq	.+52     	; 0x2aa <paddle2SM+0x46>
 276:	37 c0       	rjmp	.+110    	; 0x2e6 <paddle2SM+0x82>
 278:	83 30       	cpi	r24, 0x03	; 3
 27a:	31 f1       	breq	.+76     	; 0x2c8 <paddle2SM+0x64>
 27c:	84 30       	cpi	r24, 0x04	; 4
 27e:	81 f1       	breq	.+96     	; 0x2e0 <paddle2SM+0x7c>
 280:	32 c0       	rjmp	.+100    	; 0x2e6 <paddle2SM+0x82>
		case paddle2SM_wait:
		if (!up2 && !down2)
 282:	02 99       	sbic	0x00, 2	; 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <paddle2SM+0x26>
 286:	03 9b       	sbis	0x00, 3	; 0
 288:	42 c0       	rjmp	.+132    	; 0x30e <paddle2SM+0xaa>
		{
			paddle2SM_state = paddle2SM_wait;
		}else if (up2 && !down2)
 28a:	02 9b       	sbis	0x00, 2	; 0
 28c:	06 c0       	rjmp	.+12     	; 0x29a <paddle2SM+0x36>
 28e:	03 99       	sbic	0x00, 3	; 0
 290:	04 c0       	rjmp	.+8      	; 0x29a <paddle2SM+0x36>
		{
			paddle2SM_state = up2_press;
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <paddle2SM_state>
 298:	08 95       	ret
			
		}else if (down2 && !up2)
 29a:	03 9b       	sbis	0x00, 3	; 0
 29c:	38 c0       	rjmp	.+112    	; 0x30e <paddle2SM+0xaa>
 29e:	02 99       	sbic	0x00, 2	; 0
 2a0:	36 c0       	rjmp	.+108    	; 0x30e <paddle2SM+0xaa>
		{
			paddle2SM_state = down2_press;
 2a2:	83 e0       	ldi	r24, 0x03	; 3
 2a4:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <paddle2SM_state>
 2a8:	08 95       	ret
		}
		break;
		
		case  up2_press:
		if (up2 && !down2)
 2aa:	02 9b       	sbis	0x00, 2	; 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <paddle2SM+0x4e>
 2ae:	03 9b       	sbis	0x00, 3	; 0
 2b0:	2e c0       	rjmp	.+92     	; 0x30e <paddle2SM+0xaa>
		{
			paddle2SM_state = up2_press;
		}else if (!up2 && !down2)
 2b2:	02 99       	sbic	0x00, 2	; 0
 2b4:	2c c0       	rjmp	.+88     	; 0x30e <paddle2SM+0xaa>
 2b6:	03 99       	sbic	0x00, 3	; 0
 2b8:	2a c0       	rjmp	.+84     	; 0x30e <paddle2SM+0xaa>
		{
			paddle2SM_state = up2_release;
 2ba:	82 e0       	ldi	r24, 0x02	; 2
 2bc:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <paddle2SM_state>
 2c0:	17 c0       	rjmp	.+46     	; 0x2f0 <paddle2SM+0x8c>
		}
		break;
		
		case up2_release:
		paddle2SM_state = paddle2SM_wait;
 2c2:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <paddle2SM_state>
		break;
 2c6:	08 95       	ret
		
		case down2_press:
		if (down2 && !up2)
 2c8:	03 9b       	sbis	0x00, 3	; 0
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <paddle2SM+0x6c>
 2cc:	02 9b       	sbis	0x00, 2	; 0
 2ce:	1f c0       	rjmp	.+62     	; 0x30e <paddle2SM+0xaa>
		{
			paddle2SM_state = down2_press;
		}else if (!down2 && !up2)
 2d0:	03 99       	sbic	0x00, 3	; 0
 2d2:	1d c0       	rjmp	.+58     	; 0x30e <paddle2SM+0xaa>
 2d4:	02 99       	sbic	0x00, 2	; 0
 2d6:	1b c0       	rjmp	.+54     	; 0x30e <paddle2SM+0xaa>
		{
			paddle2SM_state = down2_release;
 2d8:	84 e0       	ldi	r24, 0x04	; 4
 2da:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <paddle2SM_state>
 2de:	10 c0       	rjmp	.+32     	; 0x300 <paddle2SM+0x9c>
		}
		break;
		
		case  down2_release:
		paddle2SM_state = paddle2SM_wait;
 2e0:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <paddle2SM_state>
		break;
 2e4:	08 95       	ret
		
		
	}
	switch (paddle2SM_state){ //actions
 2e6:	82 30       	cpi	r24, 0x02	; 2
 2e8:	19 f0       	breq	.+6      	; 0x2f0 <paddle2SM+0x8c>
 2ea:	84 30       	cpi	r24, 0x04	; 4
 2ec:	49 f0       	breq	.+18     	; 0x300 <paddle2SM+0x9c>
 2ee:	08 95       	ret
		
		case  up2_press:
		break;
		
		case up2_release://upshift
		if (pattern[7]!=224){
 2f0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
 2f4:	80 3e       	cpi	r24, 0xE0	; 224
 2f6:	59 f0       	breq	.+22     	; 0x30e <paddle2SM+0xaa>
			pattern[7]=pattern[7]<<1;
 2f8:	88 0f       	add	r24, r24
 2fa:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__data_start+0x7>
 2fe:	08 95       	ret
		
		case down2_press:
		break;
		
		case  down2_release://downshift
		if (pattern[7]!=7){
 300:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
 304:	87 30       	cpi	r24, 0x07	; 7
 306:	19 f0       	breq	.+6      	; 0x30e <paddle2SM+0xaa>
			pattern[7]=pattern[7]>>1;
 308:	86 95       	lsr	r24
 30a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__data_start+0x7>
 30e:	08 95       	ret

00000310 <store_SM>:
	}
	return 0;
}

void store_SM() {
	switch (store_state){
 310:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <store_state>
 314:	81 30       	cpi	r24, 0x01	; 1
 316:	41 f0       	breq	.+16     	; 0x328 <store_SM+0x18>
 318:	18 f0       	brcs	.+6      	; 0x320 <store_SM+0x10>
 31a:	82 30       	cpi	r24, 0x02	; 2
 31c:	49 f0       	breq	.+18     	; 0x330 <store_SM+0x20>
 31e:	0c c0       	rjmp	.+24     	; 0x338 <store_SM+0x28>
		case store_init:
		store_state = store_high;
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <store_state>
		break;
 326:	0d c0       	rjmp	.+26     	; 0x342 <store_SM+0x32>
		case store_high:
		store_state = store_low;
 328:	82 e0       	ldi	r24, 0x02	; 2
 32a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <store_state>
 32e:	0b c0       	rjmp	.+22     	; 0x346 <store_SM+0x36>
		break;
		case  store_low:
		store_state = store_high;
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <store_state>
		break;
 336:	05 c0       	rjmp	.+10     	; 0x342 <store_SM+0x32>
		
	}
	switch (store_state){
 338:	81 30       	cpi	r24, 0x01	; 1
 33a:	19 f0       	breq	.+6      	; 0x342 <store_SM+0x32>
 33c:	82 30       	cpi	r24, 0x02	; 2
 33e:	21 f4       	brne	.+8      	; 0x348 <store_SM+0x38>
 340:	02 c0       	rjmp	.+4      	; 0x346 <store_SM+0x36>
		case  store_init:
		break;
		case store_high:
		STORE_HIGH();
 342:	29 9a       	sbi	0x05, 1	; 5
		break;
 344:	08 95       	ret
		case  store_low:
		STORE_LOW();
 346:	29 98       	cbi	0x05, 1	; 5
 348:	08 95       	ret

0000034a <shiftOut>:
	
//	_delay_ms(1);
}
 
void shiftOut(uint8_t val)
{
 34a:	20 e0       	ldi	r18, 0x00	; 0
 34c:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		//if (bitOrder == LSBFIRST)
		//digitalWrite(dataPin, !!(val & (1 << i)));
		 if(!!(val & (1 << i))){
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	ac 01       	movw	r20, r24
 352:	02 2e       	mov	r0, r18
 354:	02 c0       	rjmp	.+4      	; 0x35a <shiftOut+0x10>
 356:	55 95       	asr	r21
 358:	47 95       	ror	r20
 35a:	0a 94       	dec	r0
 35c:	e2 f7       	brpl	.-8      	; 0x356 <shiftOut+0xc>
 35e:	40 ff       	sbrs	r20, 0
 360:	02 c0       	rjmp	.+4      	; 0x366 <shiftOut+0x1c>
			 DATA_HIGH();
 362:	28 9a       	sbi	0x05, 0	; 5
 364:	01 c0       	rjmp	.+2      	; 0x368 <shiftOut+0x1e>
			 }else{
			 DATA_LOW();
 366:	28 98       	cbi	0x05, 0	; 5
		 }
		//else
		//digitalWrite(dataPin, !!(val & (1 << (7 - i))));
		
		//digitalWrite(clockPin, HIGH);
		SHIFT_HIGH();
 368:	2a 9a       	sbi	0x05, 2	; 5
		//digitalWrite(clockPin, LOW);
		SHIFT_LOW();
 36a:	2a 98       	cbi	0x05, 2	; 5
 36c:	2f 5f       	subi	r18, 0xFF	; 255
 36e:	3f 4f       	sbci	r19, 0xFF	; 255
 
void shiftOut(uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
 370:	28 30       	cpi	r18, 0x08	; 8
 372:	31 05       	cpc	r19, r1
 374:	69 f7       	brne	.-38     	; 0x350 <shiftOut+0x6>
		//digitalWrite(clockPin, HIGH);
		SHIFT_HIGH();
		//digitalWrite(clockPin, LOW);
		SHIFT_LOW();
	}
 376:	08 95       	ret

00000378 <main>:
		
	}
}

int main() {
	ioSetup();
 378:	18 df       	rcall	.-464    	; 0x1aa <ioSetup>
	
	const unsigned long timerPeriod = 1;
	TimerSet(timerPeriod); TimerOn();
 37a:	61 e0       	ldi	r22, 0x01	; 1
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	02 df       	rcall	.-508    	; 0x188 <TimerSet>
 384:	a1 de       	rcall	.-702    	; 0xc8 <TimerOn>
	store_state = store_init;
 386:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <store_state>
	paddle1SM_state = paddle1SM_wait;
 38a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <paddle1SM_state>
		paddle1SM();
		paddle2SM();
		for (int i=0; i<8; i++) {
			
			shiftOut( ~pattern[i]);
			shiftOut( 128 >> i);
 38e:	68 94       	set
 390:	ee 24       	eor	r14, r14
 392:	e7 f8       	bld	r14, 7
			while(store_SM_elapsedTime>=1){
				store_SM();
				store_SM();
				store_SM_elapsedTime=0;
			}
			store_SM_elapsedTime += timerPeriod;
 394:	f1 2c       	mov	r15, r1
	TimerSet(timerPeriod); TimerOn();
	store_state = store_init;
	paddle1SM_state = paddle1SM_wait;
	//ballLogicSM();
	while (1){
		paddle1SM();
 396:	dd 24       	eor	r13, r13
 398:	d3 94       	inc	r13
		paddle2SM();
 39a:	0e df       	rcall	.-484    	; 0x1b8 <paddle1SM>
 39c:	63 df       	rcall	.-314    	; 0x264 <paddle2SM>
 39e:	00 e0       	ldi	r16, 0x00	; 0
 3a0:	11 e0       	ldi	r17, 0x01	; 1
		for (int i=0; i<8; i++) {
 3a2:	c0 e0       	ldi	r28, 0x00	; 0
			
			shiftOut( ~pattern[i]);
 3a4:	d0 e0       	ldi	r29, 0x00	; 0
 3a6:	f8 01       	movw	r30, r16
 3a8:	81 91       	ld	r24, Z+
 3aa:	8f 01       	movw	r16, r30
 3ac:	80 95       	com	r24
 3ae:	cd df       	rcall	.-102    	; 0x34a <shiftOut>
			shiftOut( 128 >> i);
 3b0:	c7 01       	movw	r24, r14
 3b2:	0c 2e       	mov	r0, r28
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <main+0x42>
 3b6:	95 95       	asr	r25
 3b8:	87 95       	ror	r24
 3ba:	0a 94       	dec	r0
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <main+0x3e>
 3be:	c5 df       	rcall	.-118    	; 0x34a <shiftOut>
			while(store_SM_elapsedTime>=1){
 3c0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <store_SM_elapsedTime>
 3c4:	81 11       	cpse	r24, r1
 3c6:	0d c0       	rjmp	.+26     	; 0x3e2 <main+0x6a>
				store_SM();
				store_SM();
				store_SM_elapsedTime=0;
			}
			store_SM_elapsedTime += timerPeriod;
 3c8:	d0 92 13 01 	sts	0x0113, r13	; 0x800113 <store_SM_elapsedTime>
	paddle1SM_state = paddle1SM_wait;
	//ballLogicSM();
	while (1){
		paddle1SM();
		paddle2SM();
		for (int i=0; i<8; i++) {
 3cc:	21 96       	adiw	r28, 0x01	; 1
 3ce:	c8 30       	cpi	r28, 0x08	; 8
 3d0:	d1 05       	cpc	r29, r1
 3d2:	49 f7       	brne	.-46     	; 0x3a6 <main+0x2e>
				store_SM();
				store_SM_elapsedTime=0;
			}
			store_SM_elapsedTime += timerPeriod;
		}
		while(!TimerFlag);
 3d4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <TimerFlag>
		TimerFlag = 0;
 3d8:	88 23       	and	r24, r24
 3da:	e1 f3       	breq	.-8      	; 0x3d4 <main+0x5c>
		
	}
 3dc:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <TimerFlag>
		for (int i=0; i<8; i++) {
			
			shiftOut( ~pattern[i]);
			shiftOut( 128 >> i);
			while(store_SM_elapsedTime>=1){
				store_SM();
 3e0:	dc cf       	rjmp	.-72     	; 0x39a <main+0x22>
				store_SM();
 3e2:	96 df       	rcall	.-212    	; 0x310 <store_SM>
 3e4:	95 df       	rcall	.-214    	; 0x310 <store_SM>
 3e6:	f0 cf       	rjmp	.-32     	; 0x3c8 <main+0x50>

000003e8 <_exit>:
 3e8:	f8 94       	cli

000003ea <__stop_program>:
 3ea:	ff cf       	rjmp	.-2      	; 0x3ea <__stop_program>
